import{r as e,a as t,g as n}from"./vendor-Z2Iecplj.js";import{r as s,B as a,P as i,D as o,U as r,a as c,C as l,b as d,T as m,c as u,E as p,d as g,F as h,S as y,e as f,I as x,f as b,L as S,Z as N,g as v,h as C,i as D,j as w,M as E,R as j}from"./icons-TJ-0hnuw.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)}).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();var A,P,I={exports:{}},O={};var T,$=(P||(P=1,I.exports=function(){if(A)return O;A=1;var t=e(),n=Symbol.for("react.element"),s=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,i=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o={key:!0,ref:!0,__self:!0,__source:!0};function r(e,t,s){var r,c={},l=null,d=null;for(r in void 0!==s&&(l=""+s),void 0!==t.key&&(l=""+t.key),void 0!==t.ref&&(d=t.ref),t)a.call(t,r)&&!o.hasOwnProperty(r)&&(c[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===c[r]&&(c[r]=t[r]);return{$$typeof:n,type:e,key:l,ref:d,props:c,_owner:i.current}}return O.Fragment=s,O.jsx=r,O.jsxs=r,O}()),I.exports),R={};const L=n(function(){if(T)return R;T=1;var e=t();return R.createRoot=e.createRoot,R.hydrateRoot=e.hydrateRoot,R}()),M=({onPatternsUpdated:e})=>{const[t,n]=s.useState(()=>{const e=localStorage.getItem("trainingExamples");return e?JSON.parse(e):[]}),[h,y]=s.useState({admissionNote:"",progressNotes:"",consultantNotes:"",procedureNote:"",finalNote:"",completedSummary:"",pathology:"",notes:""}),[f,x]=s.useState(!1),[b,S]=s.useState(null),[N,v]=s.useState(""),[C,D]=s.useState(""),w=s.useCallback(e=>{const t={structure:[],terminology:[],clinical:[],formatting:[]};if(e.completedSummary){const n=e.completedSummary.split(/\n(?=[A-Z][A-Z\s]+:)/);t.structure=n.map(e=>{const t=e.match(/^([A-Z][A-Z\s]+):/);return t?t[1].trim():null}).filter(Boolean),e.completedSummary.includes("â€¢")&&t.formatting.push("bullet_list_preferred"),e.completedSummary.match(/\d+\./)&&t.formatting.push("numbered_list_used"),e.completedSummary.match(/\n\n/g)?.length>3&&t.formatting.push("section_spacing_used")}const n=[e.admissionNote,e.progressNotes,e.consultantNotes,e.procedureNote,e.finalNote,e.completedSummary].join(" ");return["POD","post-op","preop","intraop","s/p","w/","c/o","pt","patient","tolerated","uneventful","stable","discharged","follow-up","follow up","f/u"].forEach(e=>{const s=new RegExp(`\\b${e}\\b`,"gi"),a=n.match(s);a&&a.length>0&&t.terminology.push({term:e,frequency:a.length})}),e.pathology&&t.clinical.push({pathology:e.pathology,hasConsultant:!!e.consultantNotes,hasProcedure:!!e.procedureNote,summaryLength:e.completedSummary?.length||0}),t},[]),E=s.useCallback(()=>{const e={commonStructure:{},preferredTerminology:{},pathologySpecificPatterns:{},formattingPreferences:{},totalExamples:t.length};return t.forEach(t=>{const n=w(t);n.structure.forEach(t=>{e.commonStructure[t]=(e.commonStructure[t]||0)+1}),n.terminology.forEach(({term:t,frequency:n})=>{e.preferredTerminology[t]||(e.preferredTerminology[t]={count:0,totalFreq:0}),e.preferredTerminology[t].count+=1,e.preferredTerminology[t].totalFreq+=n}),n.clinical.forEach(t=>{const n=t.pathology.toLowerCase();e.pathologySpecificPatterns[n]||(e.pathologySpecificPatterns[n]={count:0,avgSummaryLength:0,consultantRate:0,procedureRate:0});const s=e.pathologySpecificPatterns[n];s.count+=1,s.avgSummaryLength=(s.avgSummaryLength*(s.count-1)+t.summaryLength)/s.count,s.consultantRate=(s.consultantRate*(s.count-1)+(t.hasConsultant?1:0))/s.count,s.procedureRate=(s.procedureRate*(s.count-1)+(t.hasProcedure?1:0))/s.count}),n.formatting.forEach(t=>{e.formattingPreferences[t]=(e.formattingPreferences[t]||0)+1})}),e},[t,w]),j=s.useCallback(()=>{if(!h.completedSummary)return void D("Completed summary is required");const s={id:Date.now().toString(),timestamp:(new Date).toISOString(),...h},a=[...t,s];n(a),localStorage.setItem("trainingExamples",JSON.stringify(a));const i=E();localStorage.setItem("globalLearningPatterns",JSON.stringify(i)),e&&e(i),v(`Training example added! Total examples: ${a.length}`),setTimeout(()=>v(""),3e3),y({admissionNote:"",progressNotes:"",consultantNotes:"",procedureNote:"",finalNote:"",completedSummary:"",pathology:"",notes:""}),x(!1)},[h,t,E,e]),A=s.useCallback(s=>{const a=t.filter(e=>e.id!==s);n(a),localStorage.setItem("trainingExamples",JSON.stringify(a));const i=E();localStorage.setItem("globalLearningPatterns",JSON.stringify(i)),e&&e(i),v("Example deleted and patterns updated"),setTimeout(()=>v(""),3e3)},[t,E,e]),P=s.useCallback(()=>{const e=JSON.stringify(t,null,2),n=new Blob([e],{type:"application/json"}),s=URL.createObjectURL(n),a=document.createElement("a");a.href=s,a.download=`training-examples-${(new Date).toISOString().split("T")[0]}.json`,a.click(),URL.revokeObjectURL(s)},[t]),I=s.useCallback(s=>{const a=s.target.files[0];if(!a)return;const i=new FileReader;i.onload=s=>{try{const a=JSON.parse(s.target.result);if(!Array.isArray(a))return void D("Invalid file format");const i=[...t,...a];n(i),localStorage.setItem("trainingExamples",JSON.stringify(i));const o=E();localStorage.setItem("globalLearningPatterns",JSON.stringify(o)),e&&e(o),v(`Imported ${a.length} examples`),setTimeout(()=>v(""),3e3)}catch(a){D("Failed to import: "+a.message)}},i.readAsText(a)},[t,E,e]);return s.useCallback(()=>E(),[E]),$.jsxs("div",{className:"space-y-4",children:[$.jsxs("div",{className:"flex items-center justify-between",children:[$.jsxs("div",{className:"flex items-center gap-2",children:[$.jsx(a,{className:"h-6 w-6 text-indigo-600"}),$.jsx("h2",{className:"text-xl font-semibold text-gray-900",children:"Training Examples Library"})]}),$.jsxs("div",{className:"flex items-center gap-2",children:[$.jsxs("button",{onClick:()=>x(!f),className:"flex items-center gap-1 px-3 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 text-sm",children:[$.jsx(i,{className:"h-4 w-4"}),"Add Example"]}),$.jsxs("button",{onClick:P,disabled:0===t.length,className:"flex items-center gap-1 px-3 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 text-sm disabled:opacity-50",children:[$.jsx(o,{className:"h-4 w-4"}),"Export"]}),$.jsxs("label",{className:"flex items-center gap-1 px-3 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 text-sm cursor-pointer",children:[$.jsx(r,{className:"h-4 w-4"}),"Import",$.jsx("input",{type:"file",accept:".json",onChange:I,className:"hidden"})]})]})]}),$.jsx("div",{className:"bg-blue-50 border border-blue-200 rounded-lg p-4",children:$.jsxs("div",{className:"flex items-start gap-3",children:[$.jsx(c,{className:"h-5 w-5 text-blue-600 flex-shrink-0 mt-0.5"}),$.jsxs("div",{className:"text-sm text-blue-800",children:[$.jsx("p",{className:"font-medium",children:"Continuous Learning System"}),$.jsx("p",{className:"text-xs mt-1",children:"Feed completed discharge summaries (with or without consultant notes) to help the system learn. The system analyzes patterns, structure, terminology, and clinical approaches to improve future outputs. No patient identifiable information is stored - only patterns and structures are extracted."})]})]})}),N&&$.jsxs("div",{className:"bg-green-50 border border-green-200 rounded-lg p-3 flex items-center gap-2",children:[$.jsx(l,{className:"h-5 w-5 text-green-600"}),$.jsx("span",{className:"text-sm text-green-800",children:N})]}),C&&$.jsxs("div",{className:"bg-red-50 border border-red-200 rounded-lg p-3 flex items-center gap-2",children:[$.jsx(d,{className:"h-5 w-5 text-red-600"}),$.jsx("span",{className:"text-sm text-red-800",children:C})]}),t.length>0&&$.jsxs("div",{className:"card bg-gradient-to-br from-indigo-50 to-purple-50",children:[$.jsxs("div",{className:"flex items-center gap-2 mb-3",children:[$.jsx(m,{className:"h-5 w-5 text-indigo-600"}),$.jsx("h3",{className:"text-sm font-semibold text-gray-900",children:"Learning Statistics"})]}),$.jsxs("div",{className:"grid grid-cols-3 gap-3 text-sm",children:[$.jsxs("div",{className:"p-2 bg-white rounded",children:[$.jsx("p",{className:"text-gray-600 text-xs",children:"Total Examples"}),$.jsx("p",{className:"font-semibold text-lg",children:t.length})]}),$.jsxs("div",{className:"p-2 bg-white rounded",children:[$.jsx("p",{className:"text-gray-600 text-xs",children:"Unique Pathologies"}),$.jsx("p",{className:"font-semibold text-lg",children:new Set(t.map(e=>e.pathology).filter(Boolean)).size})]}),$.jsxs("div",{className:"p-2 bg-white rounded",children:[$.jsx("p",{className:"text-gray-600 text-xs",children:"With Consultants"}),$.jsx("p",{className:"font-semibold text-lg",children:t.filter(e=>e.consultantNotes).length})]})]})]}),f&&$.jsxs("div",{className:"card bg-gray-50 border-2 border-indigo-300",children:[$.jsx("h3",{className:"text-lg font-semibold text-gray-900 mb-3",children:"Add Training Example"}),$.jsxs("div",{className:"space-y-3",children:[$.jsxs("div",{children:[$.jsx("label",{className:"block text-sm font-medium text-gray-700 mb-1",children:"Pathology/Diagnosis Category"}),$.jsx("input",{type:"text",value:h.pathology,onChange:e=>y({...h,pathology:e.target.value}),placeholder:"e.g., Brain Tumor, Spine Fracture, SAH, TBI",className:"w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-indigo-500"})]}),$.jsxs("div",{children:[$.jsx("label",{className:"block text-sm font-medium text-gray-700 mb-1",children:"Admission Note/H&P"}),$.jsx("textarea",{value:h.admissionNote,onChange:e=>y({...h,admissionNote:e.target.value}),placeholder:"Paste admission note here...",className:"w-full h-24 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-indigo-500"})]}),$.jsxs("div",{children:[$.jsx("label",{className:"block text-sm font-medium text-gray-700 mb-1",children:"Progress Notes"}),$.jsx("textarea",{value:h.progressNotes,onChange:e=>y({...h,progressNotes:e.target.value}),placeholder:"Paste progress notes here...",className:"w-full h-24 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-indigo-500"})]}),$.jsxs("div",{children:[$.jsx("label",{className:"block text-sm font-medium text-gray-700 mb-1",children:"Consultant Notes (Optional)"}),$.jsx("textarea",{value:h.consultantNotes,onChange:e=>y({...h,consultantNotes:e.target.value}),placeholder:"Paste consultant notes here if available...",className:"w-full h-24 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-indigo-500"})]}),$.jsxs("div",{children:[$.jsx("label",{className:"block text-sm font-medium text-gray-700 mb-1",children:"Procedure Note (Optional)"}),$.jsx("textarea",{value:h.procedureNote,onChange:e=>y({...h,procedureNote:e.target.value}),placeholder:"Paste procedure/operative note here if available...",className:"w-full h-24 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-indigo-500"})]}),$.jsxs("div",{children:[$.jsx("label",{className:"block text-sm font-medium text-gray-700 mb-1",children:"Final/Discharge Note (Optional)"}),$.jsx("textarea",{value:h.finalNote,onChange:e=>y({...h,finalNote:e.target.value}),placeholder:"Paste final discharge note here if available...",className:"w-full h-24 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-indigo-500"})]}),$.jsxs("div",{children:[$.jsxs("label",{className:"block text-sm font-medium text-gray-700 mb-1",children:["Completed Discharge Summary ",$.jsx("span",{className:"text-red-600",children:"*"})]}),$.jsx("textarea",{value:h.completedSummary,onChange:e=>y({...h,completedSummary:e.target.value}),placeholder:"Paste the completed/final discharge summary here...",className:"w-full h-32 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-indigo-500"})]}),$.jsxs("div",{children:[$.jsx("label",{className:"block text-sm font-medium text-gray-700 mb-1",children:"Notes (Optional)"}),$.jsx("input",{type:"text",value:h.notes,onChange:e=>y({...h,notes:e.target.value}),placeholder:"Any special notes about this case...",className:"w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-indigo-500"})]}),$.jsxs("div",{className:"flex gap-2",children:[$.jsx("button",{onClick:j,className:"flex-1 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 text-sm font-medium",children:"Add to Training Library"}),$.jsx("button",{onClick:()=>x(!1),className:"px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 text-sm font-medium",children:"Cancel"})]})]})]}),t.length>0?$.jsxs("div",{className:"space-y-2",children:[$.jsxs("h3",{className:"text-sm font-semibold text-gray-700",children:["Training Examples (",t.length,")"]}),t.map(e=>$.jsxs("div",{className:"card bg-white border border-gray-200",children:[$.jsxs("div",{className:"flex items-start justify-between",children:[$.jsxs("div",{className:"flex-1",children:[$.jsxs("div",{className:"flex items-center gap-2 mb-1",children:[$.jsx(u,{className:"h-4 w-4 text-indigo-600"}),$.jsx("span",{className:"font-medium text-sm text-gray-900",children:e.pathology||"Unspecified Pathology"}),e.consultantNotes&&$.jsx("span",{className:"px-2 py-0.5 bg-blue-100 text-blue-800 rounded text-xs",children:"With Consultant"})]}),$.jsxs("p",{className:"text-xs text-gray-500",children:["Added: ",new Date(e.timestamp).toLocaleDateString()]}),e.notes&&$.jsx("p",{className:"text-xs text-gray-600 mt-1",children:e.notes})]}),$.jsxs("div",{className:"flex items-center gap-1",children:[$.jsx("button",{onClick:()=>S(b===e.id?null:e.id),className:"p-1 text-gray-600 hover:text-indigo-600",title:"View details",children:$.jsx(p,{className:"h-4 w-4"})}),$.jsx("button",{onClick:()=>A(e.id),className:"p-1 text-gray-600 hover:text-red-600",title:"Delete",children:$.jsx(g,{className:"h-4 w-4"})})]})]}),b===e.id&&$.jsxs("div",{className:"mt-3 pt-3 border-t border-gray-200 space-y-2 text-xs",children:[e.admissionNote&&$.jsxs("div",{children:[$.jsx("p",{className:"font-medium text-gray-700",children:"Admission Note:"}),$.jsxs("p",{className:"text-gray-600 mt-1 max-h-20 overflow-y-auto",children:[e.admissionNote.substring(0,200),"..."]})]}),e.completedSummary&&$.jsxs("div",{children:[$.jsx("p",{className:"font-medium text-gray-700",children:"Completed Summary:"}),$.jsxs("p",{className:"text-gray-600 mt-1 max-h-20 overflow-y-auto",children:[e.completedSummary.substring(0,200),"..."]})]})]})]},e.id))]}):$.jsxs("div",{className:"card bg-gray-50 border-2 border-dashed border-gray-300 text-center py-8",children:[$.jsx(a,{className:"h-12 w-12 text-gray-400 mx-auto mb-2"}),$.jsx("p",{className:"text-sm text-gray-600",children:"No training examples yet"}),$.jsx("p",{className:"text-xs text-gray-500 mt-1",children:"Add your first example to start building the learning library"})]})]})};class k{constructor(){this.patterns={patientName:[/(?:Patient Name|Patient|Name|Mr\.|Mrs\.|Ms\.|Dr\.)\s*:?\s*([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)/,/^([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)\s+is\s+a\s+\d+/m,/([A-Z][a-z]+(?:\s+[A-Z][a-z]+){1,3}),?\s+(?:a\s+)?\d{1,3}[\s-]*(?:year|yo)/],age:[/(\d{1,3})[\s-]*(?:year|years|yo|y\.o\.|y\/o)[\s-]*old/i,/(?:Age|AGE)\s*:?\s*(\d{1,3})/i,/(?:is\s+a\s+|is\s+an\s+)(\d{1,3})[\s-]*(?:year|yo)/i],sex:[/\b(male|female|man|woman|M|F)\b/i,/(?:Sex|Gender|SEX|GENDER)\s*:?\s*(male|female|M|F)/i],mrn:[/(?:MRN|Medical Record Number|MR#|Medical Record)\s*:?\s*(\d+)/i,/(?:Record|Chart)\s*(?:#|Number)?\s*:?\s*(\d+)/i]}}extract(e){return{patientName:this.tryPatterns(e,this.patterns.patientName),age:this.tryPatterns(e,this.patterns.age),sex:this.normalizeSex(this.tryPatterns(e,this.patterns.sex)),mrn:this.tryPatterns(e,this.patterns.mrn)}}tryPatterns(e,t){for(const n of t){const t=e.match(n);if(t&&t[1])return t[1].trim()}return""}normalizeSex(e){if(!e)return"";const t=e.toUpperCase();return"M"===t||"MALE"===t||"MAN"===t?"Male":"F"===t||"FEMALE"===t||"WOMAN"===t?"Female":e}}class _{constructor(){this.patterns={admitDate:[/(?:Admission Date|Date of Admission|Admitted|DOA)\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i,/(?:Admitted on|Admission on)\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i],dischargeDate:[/(?:Discharge Date|Date of Discharge|DOD|Discharged)\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i,/(?:Discharged on|Discharge on)\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i],procedureDate:[/(?:Procedure Date|Surgery Date|Operation Date)\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i,/(?:performed on|underwent on)\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i]}}extract(e,t,n=""){return{admitDate:this.tryPatterns(e,this.patterns.admitDate),dischargeDate:this.tryPatterns(t,this.patterns.dischargeDate),procedureDate:this.tryPatterns(n,this.patterns.procedureDate),dates:this.extractAllDates(e+" "+t+" "+n)}}tryPatterns(e,t){for(const n of t){const t=e.match(n);if(t&&t[1])return this.normalizeDate(t[1].trim())}return""}extractAllDates(e){const t=/\b(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})\b/g,n=[];let s;for(;null!==(s=t.exec(e));){const e=this.normalizeDate(s[1]);e&&!n.includes(e)&&n.push(e)}return n}normalizeDate(e){try{const t=e.split(/[/-]/);if(3===t.length){const[e,n,s]=t,a=2===s.length?`20${s}`:s;return`${e.padStart(2,"0")}/${n.padStart(2,"0")}/${a}`}}catch(t){}return e}}class F{constructor(){this.medicationPatterns=[/\b([A-Z][a-z]+(?:in|ol|ide|zole|pam|cillin|mycin|pine|zine|xone))\s+(\d+(?:\.\d+)?)\s*(mg|mcg|g|mL|units?)(?:\s+(PO|IV|IM|SC|SL))?\s+(?:q|every)?\s*(\d+(?:-\d+)?h|daily|BID|TID|QID|QHS|PRN)/gi,/(?:^|\n)\s*\d+\.\s+([A-Z][a-z]+(?:in|ol|ide|zole|pam|cillin|mycin|pine|zine|xone)?)\s+(\d+(?:\.\d+)?)\s*(mg|mcg|g|mL|units?)\s+(?:PO|IV|IM|SC|SL)?\s*(daily|BID|TID|QID|QHS|PRN|q\d+h)/gim,/\b(Keppra|Levetiracetam|Dexamethasone|Decadron|Ondansetron|Zofran|Morphine|Oxycodone|Acetaminophen|Tylenol|Ibuprofen|Gabapentin|Pregabalin|Baclofen|Diazepam|Lorazepam)\s+(\d+(?:\.\d+)?)\s*(mg|mcg|g|mL|units?)\s+(?:PO|IV|IM|SC|SL)?\s*(daily|BID|TID|QID|QHS|PRN|q\d+h)/gi],this.commonMedications=new Set(["Acetaminophen","Aspirin","Baclofen","Decadron","Dexamethasone","Diazepam","Gabapentin","Ibuprofen","Keppra","Levetiracetam","Lorazepam","Morphine","Ondansetron","Oxycodone","Pregabalin","Tylenol","Zofran"])}extract(e){const t=[],n=new Set;return this.medicationPatterns.forEach(s=>{const a=e.matchAll(s);for(const e of a){const[s,a,i,o,r,c]=e;if(a&&i&&o){const e=this.formatMedication(a,i,o,r,c),s=e.toLowerCase();n.has(s)||(t.push(e),n.add(s))}}}),{medications:t,count:t.length}}formatMedication(e,t,n,s,a){let i=`${this.capitalizeMedicationName(e)} ${t}${n}`;return s&&s.length<=4&&(i+=` ${s}`),a&&(i+=` ${a}`),i.trim()}capitalizeMedicationName(e){const t=e.charAt(0).toUpperCase()+e.slice(1).toLowerCase();for(const n of this.commonMedications)if(n.toLowerCase()===t.toLowerCase())return n;return t}extractFromSection(e){const t=e.match(/(?:DISCHARGE MEDICATIONS|Medications on Discharge|Discharge Meds)\s*:?\s*([\s\S]+?)(?=\n\n|FOLLOW|DISPOSITION|$)/i);return t?this.extract(t[1]):this.extract(e)}}class U{constructor(){this.demographicsExtractor=new k,this.dateExtractor=new _,this.medicationExtractor=new F}extract(e){const{admission:t="",progress:n="",consultant:s="",procedure:a="",final:i=""}=e,o=`${t}\n${n}\n${s}\n${a}\n${i}`,r=this.demographicsExtractor.extract(t||o),c=this.dateExtractor.extract(t,i,a),l=this.medicationExtractor.extractFromSection(i||o),d=this.extractProcedures(a,o),m=this.extractDiagnoses(t,i,o);return{patientName:r.patientName,age:r.age,sex:r.sex,mrn:r.mrn,admitDate:c.admitDate,dischargeDate:c.dischargeDate,procedureDate:c.procedureDate,dischargeMedications:l.medications,medicationCount:l.count,procedures:d.procedures,procedureTypes:d.types,admittingDiagnosis:m.admitting,dischargeDiagnosis:m.discharge,extractionMethod:"deterministic",extractionTimestamp:(new Date).toISOString(),confidence:{demographics:this.calculateConfidence(r),dates:this.calculateConfidence(c),medications:l.count>0?.9:.3}}}extractProcedures(e,t){const n=[],s=new Set,a=["craniotomy","craniectomy","laminectomy","discectomy","fusion","decompression","EVD","shunt","biopsy","resection","clipping","coiling"];return[/(?:underwent|performed|completed|s\/p)\s+([^.\n]+?(?:craniotomy|craniectomy|laminectomy|discectomy|fusion|decompression|EVD|shunt|biopsy|resection|clipping|coiling)[^.\n]*)/gi,/(?:Procedure|Operation|Surgery)\s*:?\s*([^.\n]{10,150})/gi].forEach(e=>{const i=t.matchAll(e);for(const t of i){const e=t[1].trim(),i=e.toLowerCase();e.length>=10&&!n.some(e=>e.toLowerCase()===i)&&(n.push(e),a.forEach(e=>{i.includes(e)&&s.add(e)}))}}),{procedures:n,types:Array.from(s)}}extractDiagnoses(e,t,n){const s={admitting:"",discharge:""},a=[/(?:Admitting Diagnosis|Primary Diagnosis)\s*:?\s*([^\n]{1,150}?)(?=\n|$)/i,/(?:Chief Complaint|CC)\s*:?\s*([^\n]{1,150}?)(?=\n|$)/i];for(const o of a){const t=e.match(o);if(t&&t[1]&&!this.isNarrativeText(t[1])){s.admitting=t[1].trim();break}}const i=[/(?:Discharge Diagnosis|Final Diagnosis)\s*:?\s*([^\n]{1,150}?)(?=\n|$)/i,/(?:Diagnosis at Discharge)\s*:?\s*([^\n]{1,150}?)(?=\n|$)/i];for(const o of i){const e=t.match(o);if(e&&e[1]&&!this.isNarrativeText(e[1])){s.discharge=e[1].trim();break}}return s}isNarrativeText(e){return/\b(he|she|patient|denies|reports|states|presents|led to|his|her)\b/i.test(e)||e.length>100||e.split(/[.!?]/).length>2}calculateConfidence(e){const t=Object.values(e).filter(e=>e&&""!==e),n=Object.keys(e).length;return t.length/n}}class H{static NEUROSURGICAL_DISCHARGE_PROMPT(e,t="",n="{}"){return`You are a neurosurgical discharge summary generator. Generate a comprehensive\ndischarge summary using ONLY information from the provided clinical notes.\n\nSTRICT REQUIREMENTS:\n1. Extract information ONLY from provided notes - no inference or assumptions\n2. Include all procedures (OR and bedside) with dates\n3. Identify ALL complications (infections, seizures, neurological deficits)\n4. Document consultant recommendations (especially ID and Thrombosis)\n5. Track major events and their evolution\n\nSTRUCTURED SECTIONS NEEDED:\n\nDEMOGRAPHICS:\n- Age and sex (extract exactly as documented)\n\nADMISSION DIAGNOSIS:\n- Primary diagnosis leading to admission\n\nPROCEDURES:\n- OR procedures with dates\n- Bedside procedures (EVD, lumbar drain, etc.)\n\nPRE-ADMISSION ANTICOAGULATION:\n- Medication name and indication if documented\n\nHOSPITAL COURSE:\n- Chronological summary of treatment\n- Response to interventions\n\nCOMPLICATIONS (BE VIGILANT):\n- Infections (surgical site, meningitis, ventriculitis)\n- Seizures (clinical or electrographic)\n- New neurological deficits\n- CSF leaks, hydrocephalus, hemorrhage\n\nCONSULTANT RECOMMENDATIONS:\n${t}\n\nDISCHARGE EXAMINATION:\n- Neurological status from last progress note\n- KPS if calculable from functional status\n\nFOLLOW-UP:\n- Neurosurgery follow-up plans\n- Consultant follow-up requirements\n\nNotes to process:\n${JSON.stringify(e,null,2)}\n\nGenerate the discharge summary in the following JSON structure:\n${n}`}static COMPLICATION_EXTRACTION_PROMPT(e){return`Extract ALL complications from these clinical notes.\n\nLook for:\n- Infections (surgical site, meningitis, ventriculitis, wound)\n- Seizures (clinical or electrographic)\n- New neurological deficits (motor, sensory, cognitive)\n- CSF leaks\n- Hemorrhage or rebleeding\n- Hydrocephalus\n- Wound complications\n- DVT/PE\n- Other post-operative complications\n\nFor each complication, include:\n- Type of complication\n- Date of onset\n- Severity (mild/moderate/severe)\n- Treatment provided\n- Current status (resolved/ongoing/improving)\n\nNotes:\n${JSON.stringify(e,null,2)}\n\nReturn as JSON array of complications.`}static CONSULTANT_RECOMMENDATIONS_PROMPT(e){return`Extract recommendations from consultant notes.\n\nFocus on:\n- Infectious Disease recommendations\n- Thrombosis/Anticoagulation recommendations\n- Other specialist recommendations\n\nInclude:\n- Service/specialty\n- Date of consultation\n- Specific medications and doses\n- Duration of treatment\n- Monitoring plans\n- Follow-up requirements\n\nFormat: Service | Date | Recommendations | Follow-up\n\nConsultant Notes:\n${e}\n\nReturn structured JSON.`}static CLINICAL_SYNTHESIS_PROMPT(e,t){return`Given this extracted patient data, synthesize a comprehensive clinical narrative.\n\nEnsure:\n- Medical accuracy\n- Completeness\n- Chronological flow\n- Neurosurgical context\n- Professional medical documentation style\n\nExtracted Data:\n${JSON.stringify(e,null,2)}\n\nClinical Notes:\n${JSON.stringify(t,null,2)}\n\nCreate narratives for:\n1. History of Presenting Illness\n2. Hospital Course\n3. Post-operative Progress\n4. Major Events\n5. Current Status\n\nReturn enhanced data in JSON structure.`}static FUNCTIONAL_STATUS_PROMPT(e){return`Based on these physical examination findings, estimate the patient's functional status.\n\nExam Findings:\n${e}\n\nDetermine:\n1. Karnofsky Performance Status (KPS) score (0-100)\n2. Functional description\n3. Level of independence\n4. Mobility status\n5. Discharge condition score (1-5)\n\nGuidelines:\n- KPS 100: Normal, no complaints\n- KPS 90: Normal activity with minor symptoms\n- KPS 80: Normal activity with effort\n- KPS 70: Cares for self, unable to work\n- KPS 60: Requires occasional assistance\n- KPS 50: Requires considerable assistance\n- KPS 40: Disabled, requires special care\n- KPS 30: Severely disabled\n- KPS 20: Very sick\n- KPS 10: Moribund\n\nReturn JSON with KPS score, description, and discharge condition.`}static get JSON_SCHEMA(){return{patientName:"string",age:"number",sex:"string",mrn:"string",admitDate:"string",dischargeDate:"string",admittingDiagnosis:"string",dischargeDiagnosis:"string",procedures:["array of procedure strings"],historyPresenting:"string",hospitalCourse:"string",postOpProgress:"string",complications:["array of complication objects"],imaging:["array of imaging findings"],consultantRecommendations:["array of recommendations"],majorEvents:["array of major events"],currentExam:"string",dischargeExam:"string",neurologicalExam:"string",kps:"string",functionalStatus:"string",dischargeMedications:["array of medications"],disposition:"string",followUp:["array of follow-up items"]}}}class z{constructor(e){this.config=e,this.promptTemplate=H}async generate(e,t={}){const n=this.config.modelProvider;switch(n){case"anthropic":return this.generateWithClaude(e,t);case"openai":return this.generateWithOpenAI(e,t);case"google":return this.generateWithGemini(e,t);default:throw new Error(`Unsupported provider: ${n}`)}}async generateWithClaude(e,t){const n=this.config.apiKeys.anthropic;if(!n)throw new Error("Claude API key not configured");const s=await fetch("https://api.anthropic.com/v1/messages",{method:"POST",headers:{"Content-Type":"application/json","x-api-key":n,"anthropic-version":"2023-06-01"},body:JSON.stringify({model:this.config.modelName,max_tokens:t.maxTokens||this.config.maxTokens,temperature:t.temperature??this.config.temperature,messages:[{role:"user",content:e}]})});if(!s.ok)throw new Error(`Claude API error: ${s.status} ${s.statusText}`);const a=await s.json();return a.content?.[0]?.text||""}async generateWithOpenAI(e,t){const n=this.config.apiKeys.openai;if(!n)throw new Error("OpenAI API key not configured");const s=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`},body:JSON.stringify({model:this.config.modelName,messages:[{role:"system",content:"You are a neurosurgery medical AI assistant specializing in clinical documentation."},{role:"user",content:e}],temperature:t.temperature??this.config.temperature,max_tokens:t.maxTokens||this.config.maxTokens})});if(!s.ok)throw new Error(`OpenAI API error: ${s.status} ${s.statusText}`);const a=await s.json();return a.choices?.[0]?.message?.content||""}async generateWithGemini(e,t){const n=this.config.apiKeys.google;if(!n)throw new Error("Gemini API key not configured");const s=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${this.config.modelName}:generateContent?key=${n}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:e}]}],generationConfig:{temperature:t.temperature??this.config.temperature,maxOutputTokens:t.maxTokens||this.config.maxTokens}})});if(!s.ok)throw new Error(`Gemini API error: ${s.status} ${s.statusText}`);const a=await s.json();return a.candidates?.[0]?.content?.parts?.[0]?.text||""}parseJSON(e){try{return JSON.parse(e)}catch(t){const a=e.match(/```json\s*([\s\S]*?)\s*```/);if(a)try{return JSON.parse(a[1])}catch(n){}const i=e.match(/\{[\s\S]*\}/);if(i)try{return JSON.parse(i[0])}catch(s){console.error("Failed to parse JSON from response:",s)}}return null}async generateDischargeSummary(e,t={}){const n=this.promptTemplate.NEUROSURGICAL_DISCHARGE_PROMPT(e,"Focus on Infectious Disease and Thrombosis recommendations",JSON.stringify(this.promptTemplate.JSON_SCHEMA,null,2)),s=await this.generate(n),a=this.parseJSON(s);if(a)return{...a,patientName:t.patientName||a.patientName,age:t.age||a.age,sex:t.sex||a.sex,mrn:t.mrn||a.mrn,admitDate:t.admitDate||a.admitDate,dischargeDate:t.dischargeDate||a.dischargeDate,dischargeMedications:t.dischargeMedications||a.dischargeMedications,extractionMethod:"hybrid",llmProvider:this.config.modelProvider};throw new Error("Failed to parse LLM response")}}class G{constructor(e,t){this.client=e,this.config=t}async detect(e,t){const n=this.buildPrompt(e,t);try{const e=await this.client.generate(n,{temperature:.1,maxTokens:1500});return this.parseResponse(e)}catch(s){return console.error("Complication detection failed:",s),this.fallbackDetection(e)}}buildPrompt(e,t){const{admission:n="",progress:s="",consultant:a="",procedure:i="",final:o=""}=e;return`You are a neurosurgical complications expert. Analyze these clinical notes and identify ALL complications.\n\nCRITICAL COMPLICATIONS TO DETECT:\n- Infections (surgical site, meningitis, ventriculitis, wound infection)\n- Seizures (clinical or electrographic)\n- New neurological deficits (motor, sensory, cognitive)\n- CSF leaks\n- Hemorrhage or rebleeding\n- Hydrocephalus\n- Wound complications\n- DVT/PE\n- Other post-operative complications\n\nNOTES:\nAdmission: ${n}\nProgress: ${s}\nConsultant: ${a}\nProcedure: ${i}\nFinal: ${o}\n\nFor each complication found, provide:\n1. Complication type\n2. Date of onset (if documented)\n3. Severity (mild/moderate/severe)\n4. Treatment provided\n5. Resolution status (resolved/ongoing/improving)\n\nReturn ONLY valid JSON in this format:\n{\n  "complications": [\n    {\n      "type": "infection",\n      "specific": "surgical site infection",\n      "onset": "POD 3",\n      "severity": "moderate",\n      "treatment": "antibiotics started",\n      "status": "improving"\n    }\n  ],\n  "hasComplications": true,\n  "complicationCount": 1\n}\n\nIf NO complications found, return:\n{\n  "complications": [],\n  "hasComplications": false,\n  "complicationCount": 0\n}`}parseResponse(e){try{const t=e.match(/\{[\s\S]*\}/);if(t)return JSON.parse(t[0])}catch(t){console.error("Failed to parse complication response:",t)}return{complications:[],hasComplications:!1,complicationCount:0}}fallbackDetection(e){const t=Object.values(e).join("\n").toLowerCase(),n=[];return Object.entries({infection:/\b(infection|infected|meningitis|ventriculitis|wound.*infection|abscess)\b/gi,seizure:/\b(seizure|convulsion|epileptic|status epilepticus)\b/gi,deficit:/\b(new.*deficit|weakness|paresis|plegia|numbness|sensory.*loss)\b/gi,csf_leak:/\b(csf.*leak|cerebrospinal.*leak|rhinorrhea|otorrhea)\b/gi,hemorrhage:/\b(hemorrhage|bleeding|rebleed|hematoma)\b/gi,hydrocephalus:/\b(hydrocephalus|ventricular.*dilation)\b/gi}).forEach(([e,s])=>{const a=t.match(s);a&&a.length>0&&n.push({type:e,specific:a[0],onset:"Not specified",severity:"unknown",treatment:"See notes",status:"documented"})}),{complications:n,hasComplications:n.length>0,complicationCount:n.length,method:"fallback"}}}class K{constructor(e,t){this.client=e,this.config=t}async synthesize(e,t){const n=this.buildPrompt(e,t);try{const t=await this.client.generate(n,{temperature:.2,maxTokens:2e3});return this.parseResponse(t,e)}catch(s){return console.error("Clinical synthesis failed:",s),this.fallbackSynthesis(e)}}buildPrompt(e,t){return`You are a neurosurgical documentation specialist. Synthesize a comprehensive clinical narrative from the extracted data and notes.\n\nEXTRACTED DATA:\n${JSON.stringify(e,null,2)}\n\nCLINICAL NOTES:\n${JSON.stringify(t,null,2)}\n\nCreate a professional, concise clinical narrative including:\n1. HISTORY OF PRESENTING ILLNESS: Chief complaint and timeline\n2. HOSPITAL COURSE: Chronological summary of treatment and response\n3. POST-OPERATIVE PROGRESS: Day-by-day progress if applicable\n4. MAJOR EVENTS: Significant clinical events during hospitalization\n5. CURRENT STATUS: Patient's condition at discharge\n\nGuidelines:\n- Use medical terminology appropriately\n- Be concise but comprehensive\n- Focus on neurosurgical context\n- Maintain chronological flow\n- Include response to interventions\n- Highlight functional status changes\n\nReturn ONLY valid JSON:\n{\n  "historyPresenting": "Brief HPI...",\n  "hospitalCourse": "Chronological summary...",\n  "postOpProgress": "POD 1: ... POD 2: ...",\n  "majorEvents": ["Event 1", "Event 2"],\n  "currentStatus": "Patient's current condition..."\n}`}parseResponse(e,t){try{const n=e.match(/\{[\s\S]*\}/);if(n){const e=JSON.parse(n[0]);return{...t,...e,synthesisMethod:"llm"}}}catch(n){console.error("Failed to parse synthesis response:",n)}return this.fallbackSynthesis(t)}fallbackSynthesis(e){return{...e,historyPresenting:e.admittingDiagnosis||"See notes",hospitalCourse:this.createBasicHospitalCourse(e),postOpProgress:e.postOpProgress||"See progress notes",majorEvents:e.majorEvents||[],currentStatus:e.dischargeExam||e.currentExam||"See discharge exam",synthesisMethod:"fallback"}}createBasicHospitalCourse(e){const t=[];return e.admittingDiagnosis&&t.push(`Patient admitted with ${e.admittingDiagnosis}.`),e.procedures&&e.procedures.length>0&&t.push(`Underwent ${e.procedures.join(", ")}.`),e.complications&&e.complications.length>0&&t.push(`Complications: ${e.complications.join(", ")}.`),t.push("Patient progressed through recovery as documented in progress notes."),t.join(" ")}}class J{constructor(e,t){this.client=e,this.config=t}async parse(e){if(!e||0===e.trim().length)return{consultants:[],recommendations:[],count:0};const t=this.buildPrompt(e);try{const e=await this.client.generate(t,{temperature:.1,maxTokens:1500});return this.parseResponse(e)}catch(n){return console.error("Consultant parsing failed:",n),this.fallbackParsing(e)}}buildPrompt(e){return`You are an expert at parsing medical consultant notes. Extract ALL consultant recommendations from these notes.\n\nFOCUS ON:\n- Infectious Disease recommendations (antibiotics, monitoring)\n- Thrombosis/Hematology recommendations (anticoagulation)\n- Endocrinology recommendations\n- Cardiology recommendations\n- Any specialist follow-up requirements\n\nCONSULTANT NOTES:\n${e}\n\nFor each consultant, extract:\n1. Service/specialty\n2. Date of consultation\n3. Key recommendations\n4. Medications prescribed/recommended\n5. Follow-up requirements\n6. Duration of treatment\n\nReturn ONLY valid JSON:\n{\n  "consultants": [\n    {\n      "service": "Infectious Disease",\n      "date": "12/15/2024",\n      "recommendations": [\n        "Continue vancomycin for 6 weeks",\n        "Weekly CBC and CRP monitoring"\n      ],\n      "medications": ["Vancomycin 1g IV q12h"],\n      "followUp": "ID clinic in 2 weeks",\n      "duration": "6 weeks"\n    }\n  ],\n  "count": 1\n}`}parseResponse(e){try{const t=e.match(/\{[\s\S]*\}/);if(t){const e=JSON.parse(t[0]),n=[];return e.consultants&&e.consultants.forEach(e=>{e.recommendations&&e.recommendations.forEach(t=>{n.push({service:e.service,recommendation:t,date:e.date})})}),{...e,recommendations:n}}}catch(t){console.error("Failed to parse consultant response:",t)}return this.fallbackParsing(consultantNotes)}fallbackParsing(e){const t=[],n=[];return Object.entries({"Infectious Disease":/(?:ID|Infectious Disease|Infectious Diseases)\s+(?:Consult|Consultation)/gi,Hematology:/(?:Hematology|Thrombosis|Anticoagulation)\s+(?:Consult|Consultation)/gi,Cardiology:/Cardiology\s+(?:Consult|Consultation)/gi,Endocrinology:/Endocrin(?:e|ology)\s+(?:Consult|Consultation)/gi}).forEach(([s,a])=>{if(a.test(e)){const a=new RegExp(`(${s}.*?)(?=\\n\\n|\\n[A-Z][a-z]+:|$)`,"is"),i=e.match(a);if(i){const e=i[1],a=/(?:^|\n)\s*[-â€¢*]\s*([^\n]+)/g,o=[];let r;for(;null!==(r=a.exec(e));)o.push(r[1].trim()),n.push({service:s,recommendation:r[1].trim(),date:"See notes"});o.length>0&&t.push({service:s,date:"See notes",recommendations:o,medications:[],followUp:"See notes",duration:"As directed"})}}}),{consultants:t,recommendations:n,count:t.length,method:"fallback"}}}class V{constructor(){this.requiredFields=["demographics","admittingDiagnosis","dischargeExam"],this.criticalTerms=["infection","meningitis","seizure","deficit","csf leak","hemorrhage","rebleed","ventriculitis"]}validateClinicalAccuracy(e,t){const n={isValid:!0,warnings:[],errors:[],confidenceScores:{},timestamp:(new Date).toISOString()};return this.checkRequiredFields(e,n),this.crossValidateDemographics(e,t,n),this.checkMissedComplications(e,t,n),this.validateTemporalConsistency(e,n),this.validateMedications(e,t,n),n.confidenceScores=this.calculateConfidenceScores(e,t),n}checkRequiredFields(e,t){Object.entries({demographics:["patientName","age","sex"],admittingDiagnosis:"admittingDiagnosis",dischargeExam:"dischargeExam"}).forEach(([n,s])=>{if(Array.isArray(s)){s.some(t=>e[t]&&""!==e[t])||(t.errors.push(`Missing required category: ${n}`),t.isValid=!1)}else e[s]&&""!==e[s]||t.warnings.push(`Missing recommended field: ${s}`)})}crossValidateDemographics(e,t,n){if(t&&t.age){if(e.age&&t.age){const s=parseInt(e.age),a=parseInt(t.age);Math.abs(s-a)>1&&n.warnings.push(`Age mismatch: LLM=${s}, Structured=${a}`)}if(e.sex&&t.sex){const s=e.sex.toLowerCase(),a=t.sex.toLowerCase();s===a||s.startsWith(a[0])||a.startsWith(s[0])||n.warnings.push(`Sex mismatch: LLM=${e.sex}, Structured=${t.sex}`)}}}checkMissedComplications(e,t,n){const s=t?.rawNotes||"",a=JSON.stringify(e).toLowerCase();this.criticalTerms.forEach(e=>{s.toLowerCase().includes(e)&&(a.includes(e)||n.warnings.push(`Potential missed complication: "${e}" found in notes but not in output`))}),e.complications&&(Array.isArray(e.complications)?e.complications.forEach((e,t)=>{e.type||e.specific||n.warnings.push(`Complication ${t+1} missing type/specific information`)}):(n.errors.push("Complications should be an array"),n.isValid=!1))}validateTemporalConsistency(e,t){if(e.admitDate&&e.dischargeDate){const n=this.parseDate(e.admitDate),s=this.parseDate(e.dischargeDate);n&&s&&n>s&&(t.errors.push("Temporal inconsistency: Admission date is after discharge date"),t.isValid=!1)}if(e.procedureDate&&e.admitDate&&e.dischargeDate){const n=this.parseDate(e.procedureDate),s=this.parseDate(e.admitDate),a=this.parseDate(e.dischargeDate);n&&s&&a&&(n<s||n>a)&&t.warnings.push("Procedure date outside of admission period")}}validateMedications(e,t,n){if(!t?.dischargeMedications)return;const s=new Set(t.dischargeMedications.map(e=>e.toLowerCase().split(/\s+/)[0])),a=new Set((e.dischargeMedications||[]).map(e=>e.toLowerCase().split(/\s+/)[0])),i=[...s].filter(e=>!a.has(e));i.length>0&&s.size>0&&n.warnings.push(`Potentially missed medications: ${i.join(", ")}`)}calculateConfidenceScores(e,t){const n={};return n.demographics=this.calculateFieldConfidence([e.patientName,e.age,e.sex,e.mrn]),n.dates=this.calculateFieldConfidence([e.admitDate,e.dischargeDate]),n.clinical=this.calculateFieldConfidence([e.admittingDiagnosis,e.hospitalCourse,e.dischargeExam]),n.medications=(e.dischargeMedications?.length||0)>0?.8:.3,n.overall=.3*n.demographics+.2*n.dates+.4*n.clinical+.1*n.medications,n}calculateFieldConfidence(e){const t=e.filter(e=>e&&""!==e).length;return e.length>0?t/e.length:0}parseDate(e){try{const t=new Date(e);return isNaN(t.getTime())?null:t}catch(t){return null}}validateCompleteness(e){const t=["patientName","age","sex","admittingDiagnosis","hospitalCourse","dischargeExam","dischargeMedications","followUp"],n=t.filter(t=>!e[t]||Array.isArray(e[t])&&0===e[t].length);return{isComplete:0===n.length,missingElements:n,completeness:(t.length-n.length)/t.length}}}class q{constructor(e){this.config=e,this.llmEngine=new z(e),this.validator=new V,this.structuredExtractor=new U,this.complicationDetector=new G(this.llmEngine,e),this.clinicalSynthesizer=new K(this.llmEngine,e),this.consultantParser=new J(this.llmEngine,e)}async generateDischargeSummary(e){try{console.log("Step 1: Deterministic extraction...");const n=this.structuredExtractor.extract(e);console.log("Step 2: LLM complication detection...");let s={complications:[],hasComplications:!1};if(this.config.isConfigured())try{s=await this.complicationDetector.detect(e,n)}catch(t){console.warn("Complication detection failed, using fallback:",t),s=this.complicationDetector.fallbackDetection(e)}else s=this.complicationDetector.fallbackDetection(e);console.log("Step 3: LLM consultant parsing...");let a={consultants:[],recommendations:[]};if(this.config.isConfigured()&&e.consultant)try{a=await this.consultantParser.parse(e.consultant)}catch(t){console.warn("Consultant parsing failed, using fallback:",t),a=this.consultantParser.fallbackParsing(e.consultant)}else e.consultant&&(a=this.consultantParser.fallbackParsing(e.consultant));console.log("Step 4: Merging data...");const i={...n,complications:s.complications,hasComplications:s.hasComplications,consultantRecommendations:a.recommendations,consultants:a.consultants};console.log("Step 5: LLM clinical synthesis...");let o=i;if(this.config.isConfigured())try{o=await this.clinicalSynthesizer.synthesize(i,e)}catch(t){console.warn("Clinical synthesis failed, using structured data:",t),o=this.clinicalSynthesizer.fallbackSynthesis(i)}else o=this.clinicalSynthesizer.fallbackSynthesis(i);console.log("Step 6: Validating output...");const r=this.validator.validateClinicalAccuracy(o,{...n,rawNotes:JSON.stringify(e)});return{summary:o,validation:r,completeness:this.validator.validateCompleteness(o),pipeline:{structuredExtraction:"completed",complicationDetection:s.method||"llm",consultantParsing:a.method||"llm",clinicalSynthesis:o.synthesisMethod||"llm",validationStatus:r.isValid?"passed":"warnings"},metadata:{generatedAt:(new Date).toISOString(),approach:"hybrid",llmProvider:this.config.isConfigured()?this.config.modelProvider:"none",version:"1.0.0"}}}catch(t){throw console.error("Discharge summary generation failed:",t),t}}generateWithPatternsOnly(e){console.log("Generating with patterns only (no LLM)...");const t=this.structuredExtractor.extract(e),n=this.complicationDetector.fallbackDetection(e),s=this.consultantParser.fallbackParsing(e.consultant||""),a={...t,complications:n.complications,hasComplications:n.hasComplications,consultantRecommendations:s.recommendations,consultants:s.consultants},i=this.clinicalSynthesizer.fallbackSynthesis(a),o=this.validator.validateClinicalAccuracy(i,{...t,rawNotes:JSON.stringify(e)});return{summary:i,validation:o,completeness:this.validator.validateCompleteness(i),pipeline:{structuredExtraction:"completed",complicationDetection:"fallback",consultantParsing:"fallback",clinicalSynthesis:"fallback",validationStatus:o.isValid?"passed":"warnings"},metadata:{generatedAt:(new Date).toISOString(),approach:"deterministic-only",llmProvider:"none",version:"1.0.0"}}}getHybridPipeline(){return[{name:"ExtractDemographics",type:"rule-based",component:"StructuredDataExtractor"},{name:"ExtractMedications",type:"ner-model",component:"StructuredDataExtractor"},{name:"ExtractDates",type:"regex",component:"StructuredDataExtractor"},{name:"LLMComplicationDetector",type:"llm",component:"LLMComplicationDetector"},{name:"LLMClinicalSynthesizer",type:"llm",component:"LLMClinicalSynthesizer"},{name:"LLMConsultantParser",type:"llm",component:"LLMConsultantParser"},{name:"ClinicalValidator",type:"validation",component:"ClinicalDataValidator"}]}}class B{constructor(e={}){this.modelProvider=e.modelProvider||"anthropic",this.modelName=e.modelName||this.getDefaultModel(),this.temperature=void 0!==e.temperature?e.temperature:.1,this.maxTokens=e.maxTokens||4e3,this.apiKeys={anthropic:e.anthropicApiKey||null,openai:e.openaiApiKey||null,google:e.googleApiKey||null}}getDefaultModel(){const e={anthropic:"claude-3-sonnet-20240229",openai:"gpt-4",google:"gemini-pro"};return e[this.modelProvider]||e.anthropic}getApiKey(){return this.apiKeys[this.modelProvider]}isConfigured(){return null!==this.getApiKey()}static fromLocalStorage(){const e=localStorage.getItem("geminiApiKey"),t=localStorage.getItem("openaiApiKey"),n=localStorage.getItem("claudeApiKey");return new B({googleApiKey:e,openaiApiKey:t,anthropicApiKey:n})}}new B;function Z(e){return e.claude?"anthropic":e.openai?"openai":e.gemini?"google":"anthropic"}const W=()=>{const{result:e,generateSummary:t}=(()=>{const[e,t]=s.useState(!1),[n,a]=s.useState(null),[i,o]=s.useState(null);return{loading:e,error:n,result:i,generateSummary:s.useCallback(async(e,n={},s=!1)=>{t(!0),a(null),o(null);try{const t=new B({anthropicApiKey:n.claude,openaiApiKey:n.openai,googleApiKey:n.gemini,modelProvider:Z(n),temperature:.1,maxTokens:4e3}),a=new q(t);let i;return s&&t.isConfigured()?(console.log("Using hybrid pipeline with LLM..."),i=await a.generateDischargeSummary(e)):(console.log("Using deterministic extraction only..."),i=a.generateWithPatternsOnly(e)),o(i),i}catch(i){throw console.error("Discharge summary generation error:",i),a(i.message||"Failed to generate discharge summary"),i}finally{t(!1)}},[]),getPipelineInfo:s.useCallback((e={})=>{const t=new B({anthropicApiKey:e.claude,openaiApiKey:e.openai,googleApiKey:e.gemini});return new q(t).getHybridPipeline()},[])}})(),[n,a]=s.useState(""),[i,m]=s.useState({admission:"",progress:"",consultant:"",procedure:"",final:""}),[w,E]=s.useState(null),[j,A]=s.useState(""),[P,I]=s.useState(""),[O,T]=s.useState("input"),[R,L]=s.useState(!1),[k,_]=s.useState(""),[F,U]=s.useState([]),[H,z]=s.useState(""),[G,K]=s.useState(!1),[J,V]=s.useState(!1),[W,Y]=s.useState(!1),[Q,X]=s.useState(""),[ee,te]=s.useState(""),[ne,se]=s.useState(""),[ae,ie]=s.useState(!1),[oe,re]=s.useState(!0),[ce,le]=s.useState("standard"),[de,me]=s.useState(()=>{const e=localStorage.getItem("dischargeSummaryLearning");return e?JSON.parse(e):{corrections:[],patterns:{},totalEdits:0,lastUpdated:null}}),[ue,pe]=s.useState(()=>{const e=localStorage.getItem("globalLearningPatterns");return e?JSON.parse(e):null}),ge=s.useRef(null),he=s.useRef(null);s.useEffect(()=>{const e=localStorage.getItem("dischargeSummaryDraft");if(e)try{const t=JSON.parse(e),n=t?.savedAt?new Date(t.savedAt).getTime():null,s=Date.now(),i=!!n&&s-n<=864e5,o=t.unifiedNotes||t.clinicalNotes||"";!o||!i&&t.savedAt||(a(o),t.detectedNotes&&m(t.detectedNotes),z("Previous draft restored"),setTimeout(()=>z(""),3e3))}catch(i){console.error("Failed to load saved draft",i)}const t=localStorage.getItem("geminiApiKey"),n=localStorage.getItem("openaiApiKey"),s=localStorage.getItem("claudeApiKey");t&&(X(t),Y(!0)),n&&te(n),s&&se(s)},[]),s.useEffect(()=>{if(!oe)return;const e=setTimeout(()=>{(n||Object.values(i).some(e=>e))&&localStorage.setItem("dischargeSummaryDraft",JSON.stringify({unifiedNotes:n,clinicalNotes:n,detectedNotes:i,savedAt:(new Date).toISOString()}))},2e3);return()=>clearTimeout(e)},[n,i,oe]);const ye=s.useCallback(e=>{const t={admission:"",progress:"",consultant:"",procedure:"",final:""},n=e.split(/(?:\n={3,}|\n-{3,}|\n\*{3,}|\n#{2,})/);if(1===n.length&&n[0].trim().length>100){return e.split(/\n\s*\n/).forEach(e=>{const n=e.toLowerCase();e.trim()&&(n.match(/admission|chief complaint|history of present|hpi|pmh|past medical/i)?t.admission+=e+"\n\n":n.match(/post[- ]?op|pod|hospital day|progress|daily|soap/i)?t.progress+=e+"\n\n":n.match(/consult|pt eval|ot eval|therapy|recommend/i)?t.consultant+=e+"\n\n":n.match(/operative|procedure|operation|surgery performed/i)?t.procedure+=e+"\n\n":n.match(/discharge|disposition|follow.?up|discharge meds/i)?t.final+=e+"\n\n":t.progress+=e+"\n\n")}),Object.values(t).some(e=>e.trim())||(t.progress=e),t}return n.forEach(e=>{const n=e.toLowerCase(),s=e.trim();s&&(n.includes("admission")||n.includes("history and physical")||n.includes("h&p")||n.includes("chief complaint")||n.includes("patient")&&n.includes("admitted")?t.admission+=s+"\n\n":n.includes("progress note")||n.includes("daily note")||n.includes("soap note")||n.includes("neurosurgery")&&n.includes("note")||n.match(/post[- ]?op(?:erative)?\s+day/i)?t.progress+=s+"\n\n":n.includes("consult")||n.includes("consultation")||n.includes("recommendations from")||n.match(/(?:cardiology|neurology|medicine|icu|surgery)\s+note/i)?t.consultant+=s+"\n\n":n.includes("operative note")||n.includes("procedure note")||n.includes("operation performed")||n.includes("operative report")||n.includes("op note")?t.procedure+=s+"\n\n":n.includes("discharge")||n.includes("final note")||n.includes("discharge summary")||n.includes("disposition")?t.final+=s+"\n\n":""===t.admission&&s.length>50&&(t.admission+=s+"\n\n"))}),Object.values(t).some(e=>e.trim())||(t.admission=e),t},[]),fe=s.useCallback(e=>{const t={diagnoses:[],procedures:[],medications:[],hospitalCourseEvents:[],clinicalFindings:[]};return[/\b(bleed|bleeding|hemorrhage|hematoma|ICH|intracranial hemorrhage|SDH|subdural hematoma|EDH|epidural hematoma|SAH|subarachnoid hemorrhage|IPH|intraparenchymal hemorrhage|IVH|intraventricular hemorrhage)\b/gi,/\b(tumor|neoplasm|glioma|glioblastoma|GBM|astrocytoma|oligodendroglioma|meningioma|schwannoma|acoustic neuroma|pituitary adenoma|craniopharyngioma|metastasis|metastatic|brain mass|spinal tumor)\b/gi,/\b(spinal stenosis|herniated disc|disc herniation|radiculopathy|radicular pain|myelopathy|spondylolisthesis|spondylosis|degenerative disc disease|spinal fracture|vertebral fracture|spinal cord injury|SCI)\b/gi,/\b(aneurysm|AVM|arteriovenous malformation|cavernous malformation|cavernoma|dural arteriovenous fistula|dural AVF|vasospasm|moyamoya)\b/gi,/\b(infection|abscess|brain abscess|spinal abscess|epidural abscess|meningitis|encephalitis|osteomyelitis|discitis|empyema|subdural empyema)\b/gi,/\b(CSF leak|cerebrospinal fluid leak|CSF rhinorrhea|CSF otorrhea|hydrocephalus|NPH|normal pressure hydrocephalus|obstructive hydrocephalus|communicating hydrocephalus|pseudotumor cerebri|IIH|idiopathic intracranial hypertension|increased ICP|intracranial pressure)\b/gi,/\b(seizure|seizures|epilepsy|status epilepticus|convulsion|convulsions|post-traumatic epilepsy)\b/gi,/\b(stroke|CVA|cerebrovascular accident|TIA|transient ischemic attack|ischemic stroke|hemorrhagic stroke)\b/gi,/\b(traumatic brain injury|TBI|head trauma|head injury|concussion|contusion|diffuse axonal injury|DAI)\b/gi,/\b(Chiari malformation|syringomyelia|tethered cord|spinal dysraphism)\b/gi,/\b(hypertension|HTN|high blood pressure)\b/gi,/\b(diabetes|DM|diabetic)\b/gi,/\b(pneumonia|UTI|urinary tract infection|sepsis)\b/gi,/\b(MI|myocardial infarction|heart attack|CHF|heart failure)\b/gi,/\b(COPD|asthma|respiratory failure)\b/gi,/\b(renal failure|kidney disease|CKD|acute kidney injury|AKI)\b/gi,/\b(DVT|deep vein thrombosis|PE|pulmonary embolism)\b/gi].forEach(n=>{const s=e.matchAll(n);for(const a of s){const n=a[1]||a[0],s=a.index,i=e.substring(Math.max(0,s-100),s),o=e.substring(s,Math.min(e.length,s+100)),r=i+a[0]+o,c=n.trim().toLowerCase();t.diagnoses.some(e=>e.condition.toLowerCase()===c)||t.diagnoses.push({condition:n.trim(),context:r.trim()})}}),[/\b(craniotomy|craniectomy)\b/gi,/\b(clipping|coiling)\b/gi,/\b(evacuation|drainage)\b/gi,/\b(laminectomy|discectomy|fusion|decompression)\b/gi,/\b(shunt|EVD|external ventricular drain|ventriculostomy)\b/gi,/\b(biopsy|resection|excision|removal)\b/gi,/\b(embolization|angioplasty)\b/gi].forEach(n=>{const s=e.matchAll(n);for(const a of s){const n=a.index,s=Math.max(0,n-50),i=Math.min(e.length,n+(a[0]?.length||0)+200),o=e.substring(s,i).match(/\b([A-Z]?\d?[-\s]?[A-Z]?\d?\s+)?(\w+\s+)?(craniotomy|craniectomy|clipping|coiling|evacuation|drainage|laminectomy|discectomy|fusion|decompression|shunt|EVD|biopsy|resection|excision|removal|embolization)(\s+\w+)?/i);if(o){const e=o[0].trim(),n=e.trim().toLowerCase();e.length>=5&&!t.procedures.some(e=>e.toLowerCase()===n)&&!e.match(/^(progress|notes?|assessment|plan|s|the|and|or|for)$/i)&&t.procedures.push(e.trim())}}}),[/\b([A-Z][a-z]+(?:cillin|mycin|oxacin|tidine|prazole|olol|pril|sartan|statin))\s+(\d+\.?\d*)\s*(mg|mcg|g|units?)(?:\s+(daily|BID|TID|QID|q\d+h|PRN))?/gi,/\b(aspirin|acetaminophen|ibuprofen|morphine|fentanyl|hydrocodone|oxycodone)\s+(\d+\.?\d*)\s*(mg|mcg)(?:\s+(daily|BID|TID|QID|q\d+h|PRN))?/gi,/\b(levetiracetam|keppra|phenytoin|dilantin|carbamazepine|valproic acid)\s+(\d+\.?\d*)\s*(mg|mcg)(?:\s+(daily|BID|TID|QID|q\d+h|PRN))?/gi,/\b(nimodipine|labetalol|metoprolol|lisinopril|amlodipine)\s+(\d+\.?\d*)\s*(mg|mcg)(?:\s+(daily|BID|TID|QID|q\d+h|PRN))?/gi].forEach(n=>{const s=e.matchAll(n);for(const e of s)if(e[1]&&e[2]){const n=`${e[1]} ${e[2]}${e[3]||""}${e[4]?" "+e[4]:""}`,s=n.trim().toLowerCase();t.medications.some(e=>e.toLowerCase()===s)||t.medications.push(n.trim())}}),[/\b(underwent|had|received|completed|tolerated|developed|experienced)\s+([^.]+)/gi,/\b(post[-\s]?op(?:erative)?|after surgery|following procedure)\s+([^.]+)/gi,/\b(improved|worsened|stabilized|recovered|progressed)\b/gi,/\b(transferred to|admitted to|discharged to)\s+([^.]+)/gi,/\b(day \d+|POD \d+|hospital day \d+|HD \d+)\s*:?\s*([^.]+)/gi].forEach(n=>{const s=e.matchAll(n);for(const e of s){const n=e[0],s=n.trim().toLowerCase();t.hospitalCourseEvents.some(e=>e.toLowerCase()===s)||t.hospitalCourseEvents.push(n.trim())}}),t},[]),xe=s.useCallback((e=null)=>{const t=e||i,n=t.admission||"",s=t.progress||"",a=t.final||"",o=t.procedure||"",r=fe(n+" "+s+" "+a+" "+o),c=[/(\d{1,3})[\s-]*(?:year|years|yo|y\.o\.|y\/o)[\s-]*old/i,/(?:Age|AGE)\s*:?\s*(\d{1,3})/i,/(?:is\s+a\s+|is\s+an\s+)(\d{1,3})[\s-]*(?:year|yo)/i],l=[/\b(male|female|man|woman|M|F)\b/i,/(?:Sex|Gender|SEX|GENDER)\s*:?\s*(male|female|M|F)/i],d=[/(?:MRN|Medical Record Number|MR#|Medical Record)\s*:?\s*(\d+)/i,/(?:Record|Chart)\s*(?:#|Number)?\s*:?\s*(\d+)/i],m=[/(?:Admission Date|Date of Admission|Admitted|DOA)\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i,/(?:Admitted on|Admission on)\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i],u=[/(?:Discharge Date|Date of Discharge|DOD|Discharged)\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i,/(?:Discharged on|Discharge on)\s*:?\s*(\d{1,2}[/-]\d{1,2}[/-]\d{2,4})/i],p=(e,t)=>{for(const n of t){const t=e.match(n);if(t&&t[1])return t[1].trim()}return""},g={patientName:p(n,[/(?:Patient Name|Patient|Name|Mr\.|Mrs\.|Ms\.|Dr\.)\s*:?\s*([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)/,/^([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)\s+is\s+a\s+\d+/m,/([A-Z][a-z]+(?:\s+[A-Z][a-z]+){1,3}),?\s+(?:a\s+)?\d{1,3}[\s-]*(?:year|yo)/]),age:p(n,c),sex:p(n,l),mrn:p(n,d),admitDate:p(n,m),dischargeDate:p(a,u),admittingDiagnosis:"",dischargeDiagnosis:"",procedures:[],historyPresenting:"",hospitalCourse:"",complications:[],imaging:[],consultantRecommendations:[],postOpProgress:"",majorEvents:[],currentExam:"",dischargeExam:"",neurologicalExam:"",vitalSigns:"",kps:"",dischargeConditionScore:"",functionalStatus:"",dischargeMedications:[],allergies:"",pmh:[],psh:[],disposition:"Home",diet:"Regular",activity:"As tolerated",followUp:[]},h=n+"\n"+s+"\n"+a;let y=n.match(/(?:Admitting Diagnosis|Primary Diagnosis)\s*:?\s*([^\n]{1,200}?)(?=\n|$)/i);if(!y&&(y=n.match(/(?:Chief Complaint|CC|Presenting Problem)\s*:?\s*([^\n]{1,150}?)(?=\n|$)/i),y&&y[1])){const e=y[1].trim();(e.match(/\b(he|she|patient|denies|reports|states|presents with|led to|his|her)\b/i)||e.length>100||e.split(/[.!?]/).length>2)&&(y=null)}y||(y=n.match(/^Diagnosis\s*:?\s*([^\n]{1,150}?)(?=\n|$)/im)),!y&&r.diagnoses.length>0?g.admittingDiagnosis=r.diagnoses[0].condition:y&&(g.admittingDiagnosis=y[1].trim());let f=a.match(/(?:Discharge Diagnosis|Final Diagnosis|Primary Diagnosis)\s*:?\s*([^\n]+)/i);if(f||(f=h.match(/(?:Discharge Diagnosis|Final Diagnosis|Primary Diagnosis)\s*:?\s*([^\n]+)/i)),f||(f=h.match(/^Diagnosis\s*:?\s*([^\n]+)/im)),!f&&r.diagnoses.length>0){const e=r.diagnoses.slice(0,3).map(e=>e.condition).join(", ");g.dischargeDiagnosis=e}else f&&(g.dischargeDiagnosis=f[1].trim());const x=n.match(/(?:HPI|History of Present Illness|History|Present Illness|Chief Complaint|CC)\s*:?\s*([\s\S]{50,800}?)(?=\n\n+|\n(?:PMH|Past Medical|PSH|Past Surgical|Medications|Allergies|Physical Exam|PE|Assessment|Plan)\s*:|$)/i);x&&(g.historyPresenting=x[1].trim());const b=n.match(/(?:PMH|Past Medical History|Medical History)\s*:?\s*([\s\S]{20,500}?)(?=\n\n+|\n(?:PSH|Past Surgical|Medications|Allergies|Social History|Family History)\s*:|$)/i);b&&(g.pmh=b[1].split(/[,\n]/).filter(e=>e.trim()).map(e=>e.trim()));const S=n.match(/(?:Allergies|ALLERGIES|Allergy|NKDA)\s*:?\s*([^\n]+)/i);S&&(g.allergies=S[1].trim());const N=o||s;if(N){let e=N.match(/(?:Procedure|Operation|Surgery|Operative Procedure)(?!\(s\)\s*\([A-Z]+\)\s*:)\s*:?\s*([^\n]{15,})/gi);const t=N.matchAll(/(?:Post-?Op(?:erative)?\s+)?(?:Procedure|Operation|Surgery)\s*(?:\(s\))?\s*(?:\([A-Z]+\))?\s*:\s*\n([^\n]{15,})/gi),n=[...e||[],...Array.from(t).map(e=>e[1]).map(e=>`Procedure: ${e}`)];n.length>0&&(g.procedures=n.map(e=>e.replace(/(?:Post-?Op(?:erative)?\s+)?(?:Procedure|Operation|Surgery|Operative Procedure)\s*(?:\(s\))?\s*(?:\([A-Z]+\))?\s*:?\s*/i,"").trim()).filter(e=>{const t=e.length>=15,n=!e.match(/^[\(\)\s\w]{1,5}$/),s=!e.match(/^(progress|notes?|s|LRB|RRB|\(s\)|\([A-Z]+\)|assessment|plan|in bed|received|see below|as follows)$/i),a=/\b\w{3,}\b.*\b\w{3,}\b/.test(e),i=e.match(/\b(craniotomy|craniectomy|laminectomy|discectomy|fusion|biopsy|resection|excision|removal|drainage|evacuation|decompression|clipping|coiling|shunt|evd|minicraniotomy|duraplasty)\b/i);return t&&n&&s&&a&&i}));const a=s.match(/(?:POD|Post-op day|Hospital Day|HD)\s*#?\d+[^\n]*\n([\s\S]{50,500}?)(?=\n(?:POD|Post-op|Hospital Day|HD)|$)/gi);a&&(g.hospitalCourse=a.join("\n\n"))}if(0===g.procedures.length&&r.procedures.length>0){const e=r.procedures.filter(e=>e.length>=5&&!e.match(/^(progress|notes?|s|assessment|plan)$/i));e.length>0&&(g.procedures=e)}if(!g.hospitalCourse){const e=(n+"\n"+s+"\n"+a).match(/(?:Hospital Course|Clinical Course|Course)\s*:?\s*([\s\S]{30,1000}?)(?=\n\n(?:[A-Z][a-z]+\s*:)|Discharge|Physical Exam|Medications|Disposition|$)/i);e&&(g.hospitalCourse=e[1].trim())}!g.hospitalCourse&&r.hospitalCourseEvents.length>0&&(g.hospitalCourse=r.hospitalCourseEvents.slice(0,10).join(". ")+".");const v=a.match(/(?:Physical Exam|PE|Examination|Exam)\s*:?\s*([\s\S]{30,400}?)(?=\n\n|\n[A-Z]|Labs|Medications|$)/i);v&&(g.currentExam=v[1].trim());const C=a.match(/(?:Vital Signs|Vitals|VS)\s*:?\s*([^\n]+)/i);C&&(g.vitalSigns=C[1].trim());const D=a.match(/(?:Discharge Medications|Medications|Meds)\s*:?\s*([\s\S]{30,500}?)(?=\n\n|\nFollow|Activity|Diet|$)/i);D&&(g.dischargeMedications=D[1].split(/\n/).filter(e=>e.trim()&&/\d/.test(e)).map(e=>e.trim())),0===g.dischargeMedications.length&&r.medications.length>0&&(g.dischargeMedications=r.medications);const w=a.match(/(?:Disposition|Discharge to|Going to)\s*:?\s*([^\n]+)/i);w&&(g.disposition=w[1].trim());const E=a.match(/(?:Follow.?up|F\/U|Appointments)\s*:?\s*([\s\S]{20,300}?)(?=\n\n|Warning|Instructions|$)/i);E&&(g.followUp=E[1].split(/\n/).filter(e=>e.trim()).map(e=>e.trim()));const j=h.match(/(?:CT|MRI|X-ray|Imaging|Radiology)\s*(?:scan|report|findings|shows?|demonstrates?|reveals?)\s*:?\s*([\s\S]{30,500}?)(?=\n\n|\n(?:Labs?|Physical|Exam|Assessment|Plan)|$)/gi);j&&(g.imaging=j.map(e=>e.replace(/(?:CT|MRI|X-ray|Imaging|Radiology)\s*(?:scan|report|findings|shows?|demonstrates?|reveals?)\s*:?\s*/i,"").trim()));const A=h.match(/(?:Complications?|Adverse Events?|Post-?op complications?)\s*:?\s*([\s\S]{20,400}?)(?=\n\n|\n[A-Z][a-z]+\s*:|$)/i);if(A)g.complications=A[1].split(/[,;\n]/).filter(e=>e.trim()&&e.length>3).map(e=>e.trim());else{const e=s.match(/\b(developed|experienced|had)\s+([\w\s]+(?:hemorrhage|infection|leak|dehiscence|failure|arrest|sepsis|pneumonia|DVT|PE|MI|stroke))/gi);e&&(g.complications=e.map(e=>e.replace(/\b(developed|experienced|had)\s+/i,"").trim()))}const P=(t.consultant||"").match(/(?:Recommendations?|Plan|Suggest|Advise)\s*:?\s*([\s\S]{30,500}?)(?=\n\n|\n(?:Signed|Attending)|$)/i);if(P)g.consultantRecommendations=P[1].split(/\n/).filter(e=>e.trim()&&e.length>5).map(e=>e.trim());else{const e=h.match(/(?:Consult(?:ant|ation)?|Specialist|Physical Therapy|PT eval(?:uation)?|Occupational Therapy|OT eval(?:uation)?|Cardiology|Neurology|Rehab|Pain|Speech)\s+(?:recommend(?:s|ed)?|suggest(?:s|ed)?|advise(?:s|d)?|state(?:s|d)?|note(?:s|d)?|eval(?:uated|uation)?)\s*:?\s*([^\n]{20,300})/gi);e&&(g.consultantRecommendations=e.map(e=>e.trim()));const t=h.match(/(?:PT|OT|Physical Therapy|Occupational Therapy)\s*(?:Notes?|Evaluation|Assessment|Recommendations?)\s*:?\s*([\s\S]{30,300}?)(?=\n\n|\n[A-Z][a-z]+\s*:|$)/gi);t&&t.forEach(e=>{const t=e.trim();g.consultantRecommendations.some(e=>e.toLowerCase().includes(t.toLowerCase().substring(0,20)))||g.consultantRecommendations.push(t)})}const I=s.match(/(?:POD|Post-?op(?:erative)? day|Hospital day|HD)\s*#?\s*(\d+)\s*:?\s*([\s\S]{30,500}?)(?=\n(?:POD|Post-?op|Hospital day|HD|Date:|\d{1,2}\/\d{1,2})|\n\n|$)/gi);I&&(g.postOpProgress=I.join("\n\n"));[/\b(code blue|rapid response|ICU transfer|intubat(?:ed|ion)|extubat(?:ed|ion)|cardiac arrest|seizure|stroke|hemorrhage|reoperation)\b/gi,/\b(transferred to ICU|admitted to ICU|return to OR|emergency surgery)\b/gi].forEach(e=>{const t=h.matchAll(e);for(const n of t){const e=n.index,t=h.substring(Math.max(0,e-50),e),s=h.substring(e,Math.min(h.length,e+100)),a=(t+n[0]+s).trim();g.majorEvents.some(e=>e.toLowerCase().includes(n[0].toLowerCase()))||g.majorEvents.push(a)}});const O=a.match(/(?:Discharge Exam|Physical Exam(?:ination)? at Discharge|Final Exam)\s*:?\s*([\s\S]{30,500}?)(?=\n\n|\n(?:Labs?|Medications|Disposition)|$)/i);O?g.dischargeExam=O[1].trim():g.currentExam&&(g.dischargeExam=g.currentExam);const T=h.match(/(?:Neuro(?:logical)? Exam|Mental Status|CN|Cranial Nerves|Motor|Sensory)\s*:?\s*([\s\S]{30,400}?)(?=\n\n|\n(?:Cardiovascular|Respiratory|Labs)|$)/i);T&&(g.neurologicalExam=T[1].trim());const $=h.match(/(?:KPS|Karnofsky Performance Status|Karnofsky)\s*:?\s*(\d{1,3})/i);$&&(g.kps=$[1]);if(!g.kps&&(g.neurologicalExam||g.dischargeExam||g.currentExam)){const e=(()=>{const e=(g.neurologicalExam+" "+g.dischargeExam+" "+g.currentExam+" "+h).toLowerCase();let t=0,n="";e.includes("independent")||e.includes("ambulat")&&e.includes("independent")?e.includes("normal")||e.includes("no deficits")||e.includes("intact")?(t=90,n="Independent with normal activity; no or minor signs/symptoms of disease"):(t=80,n="Independent with activities of daily living; some signs/symptoms of disease"):e.includes("minimal assistance")||e.includes("contact guard")?(t=70,n="Cares for self; unable to carry on normal activity or work; minimal assistance required"):e.includes("moderate assistance")||e.includes("assist")&&!e.includes("independent")?(t=60,n="Requires occasional assistance but able to care for most needs; moderate assistance required"):e.includes("maximal assistance")||e.includes("dependent")?(t=50,n="Requires considerable assistance and frequent care; considerable/maximal assistance required"):(e.includes("total care")||e.includes("unable to care"))&&(t=40,n="Disabled; requires special care and assistance; total care required"),e.includes("bedridden")||e.includes("bed-bound")?(t=Math.min(t,30),n="Severely disabled; hospitalization/skilled care indicated; bedridden"):e.includes("wheelchair")&&(t=Math.max(40,Math.min(t,60))),(e.includes("fully functional")||e.includes("no limitations"))&&(t=100,n="Normal; no complaints; no evidence of disease"),e.match(/motor.*5\/5|strength.*5\/5|full strength/i)?t=Math.max(t,80):e.match(/motor.*[3-4]\/5|strength.*[3-4]\/5/i)?t=Math.max(40,Math.min(t,70)):e.match(/motor.*[1-2]\/5|strength.*[1-2]\/5/i)&&(t=Math.min(t,50));let s="";return t>=80?s="5 - Excellent":t>=70?s="4 - Good":t>=50?s="3 - Fair":t>=30?s="2 - Poor":t>0&&(s="1 - Critical"),{kpsScore:t,functionalDescription:n,dcsScore:s}})();e.kpsScore>0&&(g.kps=e.kpsScore.toString(),g.functionalStatus=e.functionalDescription,g.dischargeConditionScore=e.dcsScore)}return g},[i,fe]),be=s.useCallback(async()=>{if(!Q)throw new Error("Gemini API key is required");const e=i,t=`You are a medical AI specialized in extracting neurosurgical and spine patient information. \nExtract the following information from these clinical notes and return as JSON:\n- patientName, age, sex, mrn\n- admitDate, dischargeDate\n- admittingDiagnosis, dischargeDiagnosis\n- procedures (array), complications (array)\n- historyPresenting, hospitalCourse\n- imaging (array - CT/MRI/X-ray findings)\n- consultantRecommendations (array - recommendations from consultants)\n- postOpProgress (string - post-operative day-by-day progress)\n- majorEvents (array - significant events during hospitalization)\n- currentExam, dischargeExam, neurologicalExam, vitalSigns\n- dischargeMedications (array), allergies\n- pmh (array), psh (array)\n- disposition, diet, activity\n- followUp (array)\n- kps (Karnofsky Performance Status score if mentioned)\n- functionalStatus (overall functional assessment)\n\nFocus on: reason for admission, signs/symptoms, imaging findings, surgical treatments, post-operative progress, \nsymptom changes (new/worsening/improving), major events, consultant plans.\n\nFor neurosurgery cases, pay special attention to: hemorrhage/bleed, tumor, infection, abscess, CSF leak, \nhydrocephalus, radicular pain, myelopathy, fracture, seizures.\n\nEstimate functional status from physical exam findings (independence, mobility, motor strength).\n\nADMISSION NOTE:\n${e.admission}\n\nPROGRESS NOTES:\n${e.progress}\n\nCONSULTANT NOTES:\n${e.consultant}\n\nPROCEDURE NOTE:\n${e.procedure}\n\nDISCHARGE NOTE:\n${e.final}`;try{const e=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${Q}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:t}]}],generationConfig:{temperature:.1,maxOutputTokens:2048}})});if(!e.ok)throw new Error("Gemini API request failed");const n=await e.json(),s=n.candidates?.[0]?.content?.parts?.[0]?.text;if(s){const e=s.match(/\{[\s\S]*\}/);if(e)return JSON.parse(e[0])}throw new Error("Could not parse Gemini response")}catch(n){throw console.error("Gemini extraction error:",n),n}},[Q,i]),Se=s.useCallback(async e=>{if(!ee)return e;try{const t=`Given this extracted patient data, synthesize and enhance the clinical narrative, \nensuring medical accuracy and completeness. Focus on neurosurgical context.\n\nExtracted Data:\n${JSON.stringify(e,null,2)}\n\nReturn enhanced data in the same JSON structure with improved narratives.`,n=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${ee}`},body:JSON.stringify({model:"gpt-4",messages:[{role:"system",content:"You are a neurosurgery medical AI assistant specializing in clinical documentation."},{role:"user",content:t}],temperature:.3,max_tokens:2e3})});if(!n.ok)return console.warn("OpenAI synthesis skipped:",n.statusText),e;const s=await n.json(),a=s.choices?.[0]?.message?.content;if(a){const e=a.match(/\{[\s\S]*\}/);if(e)return JSON.parse(e[0])}return e}catch(t){return console.error("OpenAI synthesis error:",t),e}},[ee]),Ne=s.useCallback(async e=>{if(!ne)return e;try{const t=`You are Claude, an AI specialized in medical documentation structure and summarization.\n      \nGiven this clinical data, structure and summarize it into a well-organized discharge summary format.\nFocus on clarity, completeness, and proper medical documentation standards.\n\nClinical Data:\n${JSON.stringify(e,null,2)}\n\nReturn the structured data in the same JSON format with improved organization and concise summaries.`,n=await fetch("https://api.anthropic.com/v1/messages",{method:"POST",headers:{"Content-Type":"application/json","x-api-key":ne,"anthropic-version":"2023-06-01"},body:JSON.stringify({model:"claude-3-sonnet-20240229",max_tokens:2e3,messages:[{role:"user",content:t}],temperature:.3})});if(!n.ok)return console.warn("Claude structuring skipped:",n.statusText),e;const s=await n.json(),a=s.content?.[0]?.text;if(a){const e=a.match(/\{[\s\S]*\}/);if(e)return JSON.parse(e[0])}return e}catch(t){return console.error("Claude structuring error:",t),e}},[ne]),ve=s.useCallback(async()=>{let e;if(Q)try{e=await be()}catch(t){console.warn("Gemini extraction failed, using patterns:",t),e=xe()}else e=xe();if(ee&&e)try{e=await Se(e)}catch(t){console.warn("OpenAI synthesis failed, continuing without:",t)}if(ne&&e)try{e=await Ne(e)}catch(t){console.warn("Claude structuring failed, continuing without:",t)}return e},[Q,ee,ne,be,Se,Ne,xe]),Ce=s.useCallback((e,t)=>{const n=[];e.length<t.length?n.push({type:"addition",context:"content_expansion"}):e.length>t.length&&n.push({type:"reduction",context:"content_simplification"});const s=e.split(/\n[A-Z][A-Z\s]+\n/),a=t.split(/\n[A-Z][A-Z\s]+\n/);s.length!==a.length&&n.push({type:"structure",context:"section_reorganization"});const i={patient:["pt","individual","case"],underwent:["had","received","completed"],discharge:["released","sent home","transferred"],stable:["improving","well","good condition"],tolerated:["did well with","handled","managed"],procedure:["surgery","operation","intervention"],examination:["exam","assessment","evaluation"]};for(const[o,r]of Object.entries(i))e.toLowerCase().includes(o)&&!t.toLowerCase().includes(o)&&r.some(e=>t.toLowerCase().includes(e))&&n.push({type:"terminology_preference",from:o,to:r.find(e=>t.toLowerCase().includes(e)),context:"formality_adjustment"});(e.match(/\n/g)||[]).length<(t.match(/\n/g)||[]).length&&n.push({type:"formatting",context:"improved_readability"});return["INITIAL PRESENTATION","TREATMENT","EVOLUTION","FUNCTIONAL STATUS","REHABILITATION","CONSULTANT","DISCHARGE STATUS","HOSPITAL COURSE"].forEach(s=>{!e.includes(s)&&t.includes(s)&&n.push({type:"section_added",context:s})}),t.includes("Initial Imaging")&&!e.includes("Initial Imaging")&&n.push({type:"organization",context:"imaging_separated"}),t.includes("Pre-Operative")&&!e.includes("Pre-Operative")&&n.push({type:"organization",context:"pre_post_op_distinction"}),n},[]),De=s.useCallback(e=>{const t=Ce(j,e);if(t.length>0){const e={...de};t.forEach(t=>{const n=`${t.type}_${t.context}`;e.patterns[n]=(e.patterns[n]||0)+1}),e.corrections.push({timestamp:(new Date).toISOString(),patterns:t,editType:t.map(e=>e.type).join(",")}),e.totalEdits+=1,e.lastUpdated=(new Date).toISOString(),e.corrections.length>100&&(e.corrections=e.corrections.slice(-100)),me(e),localStorage.setItem("dischargeSummaryLearning",JSON.stringify(e)),z("Learning saved - future summaries will incorporate this pattern"),setTimeout(()=>z(""),3e3)}A(e),I(e),V(!1)},[j,de,Ce]),we=s.useCallback(e=>{let t=e;return Object.entries(de.patterns).sort((e,t)=>t[1]-e[1]).slice(0,10).forEach(([e,n])=>{if(n>=2){const[n,s]=e.split("_");if("formatting"===n&&"improved"===s&&(t=t.replace(/\n([A-Z])/g,"\n\n$1")),"terminology_preference"===n){de.corrections.filter(e=>e.patterns&&e.patterns.some(e=>"terminology_preference"===e.type)).slice(-5).forEach(e=>{e.patterns.forEach(e=>{if("terminology_preference"===e.type&&e.from&&e.to){const n=new RegExp(`\\b${e.from}\\b`,"gi");t=t.replace(n,e.to)}})})}}}),ue&&(ue.preferredTerminology&&Object.entries(ue.preferredTerminology).forEach(([e,t])=>{t.count>=3&&t.totalFreq}),ue.formattingPreferences&&(ue.formattingPreferences.bullet_list_preferred,ue.formattingPreferences.numbered_list_used)),t},[de,ue]),Ee=(e,t)=>{E(n=>({...n,[e]:t}))};return $.jsxs("div",{className:"max-w-7xl mx-auto p-4 sm:p-6 lg:p-8",children:[$.jsx("header",{className:"card mb-6 no-print",children:$.jsxs("div",{className:"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4",children:[$.jsxs("div",{className:"flex items-center space-x-3",children:[$.jsx("div",{className:"p-3 bg-blue-100 rounded-lg",children:$.jsx(h,{className:"h-8 w-8 text-blue-600"})}),$.jsxs("div",{children:[$.jsx("h1",{className:"text-2xl font-bold text-gray-900 dark:text-white",children:"Discharge Summary Generator"}),$.jsx("p",{className:"text-sm text-gray-600 dark:text-gray-400",children:"Extract and generate medical discharge summaries"})]})]}),$.jsxs("div",{className:"flex items-center gap-2",children:[oe&&$.jsxs("span",{className:"text-xs text-green-600 flex items-center",children:[$.jsx(y,{className:"h-3 w-3 mr-1"}),"Auto-save on"]}),$.jsx("button",{onClick:()=>re(!oe),className:"btn-secondary text-sm",title:"Toggle auto-save",children:$.jsx(u,{className:"h-4 w-4"})}),$.jsx("button",{onClick:()=>{confirm("Clear all data? This cannot be undone.")&&(a(""),m({admission:"",progress:"",consultant:"",procedure:"",final:""}),E(null),A(""),I(""),_(""),U([]),z("All data cleared"),localStorage.removeItem("dischargeSummaryDraft"))},className:"btn-secondary text-sm text-red-600",title:"Clear all data",children:$.jsx(g,{className:"h-4 w-4"})})]})]})}),k&&$.jsxs("div",{className:"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-start gap-2 no-print",children:[$.jsx(d,{className:"h-5 w-5 text-red-600 flex-shrink-0 mt-0.5"}),$.jsx("p",{className:"text-sm text-red-800",children:k})]}),F.length>0&&$.jsx("div",{className:"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg no-print",children:$.jsxs("div",{className:"flex items-start gap-2",children:[$.jsx(d,{className:"h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5"}),$.jsxs("div",{className:"text-sm text-yellow-800",children:[$.jsx("p",{className:"font-medium mb-1",children:"Warnings:"}),$.jsx("ul",{className:"list-disc list-inside space-y-1",children:F.map((e,t)=>$.jsx("li",{children:e},t))})]})]})}),H&&$.jsxs("div",{className:"mb-4 p-3 bg-green-50 border border-green-200 rounded-lg flex items-start gap-2 no-print animate-fade-in",children:[$.jsx(l,{className:"h-5 w-5 text-green-600 flex-shrink-0 mt-0.5"}),$.jsx("p",{className:"text-sm text-green-800",children:H})]}),$.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6",children:[$.jsxs("div",{className:"space-y-6 no-print",children:[$.jsxs("div",{className:"card",children:[$.jsxs("div",{className:"flex items-center justify-between mb-4",children:[$.jsx("h2",{className:"text-lg font-semibold text-gray-900",children:"Settings"}),$.jsx(f,{className:"h-5 w-5 text-gray-400"})]}),$.jsxs("div",{className:"space-y-3",children:[$.jsxs("div",{className:"flex items-center justify-between",children:[$.jsxs("label",{className:"flex items-center gap-2",children:[$.jsx("input",{type:"checkbox",checked:W,onChange:e=>{Y(e.target.checked),!e.target.checked||Q||ee||ne||ie(!0)},className:"rounded"}),$.jsx("span",{className:"text-sm font-medium",children:"Use Multi-AI Extraction"}),$.jsx(c,{className:"h-4 w-4 text-purple-600"})]}),W&&$.jsx("button",{onClick:()=>ie(!ae),className:"text-xs text-blue-600 hover:underline",children:Q||ee||ne?"Manage API Keys":"Add API Keys"})]}),ae&&$.jsxs("div",{className:"space-y-2 p-3 bg-gray-50 rounded-lg",children:[$.jsx("p",{className:"text-xs text-gray-600 mb-2",children:"Configure AI APIs for synergistic extraction:"}),$.jsxs("div",{children:[$.jsx("label",{className:"block text-xs font-medium text-gray-700 mb-1",children:"Gemini API Key (Medical Extraction)"}),$.jsx("input",{type:"password",value:Q,onChange:e=>X(e.target.value),placeholder:"Enter Gemini API key",className:"input-field text-sm w-full"})]}),$.jsxs("div",{children:[$.jsx("label",{className:"block text-xs font-medium text-gray-700 mb-1",children:"OpenAI API Key (Clinical Synthesis) - Optional"}),$.jsx("input",{type:"password",value:ee,onChange:e=>te(e.target.value),placeholder:"Enter OpenAI API key (optional)",className:"input-field text-sm w-full"})]}),$.jsxs("div",{children:[$.jsx("label",{className:"block text-xs font-medium text-gray-700 mb-1",children:"Claude API Key (Structuring) - Optional"}),$.jsx("input",{type:"password",value:ne,onChange:e=>se(e.target.value),placeholder:"Enter Claude API key (optional)",className:"input-field text-sm w-full"})]}),$.jsx("button",{onClick:()=>{Q&&localStorage.setItem("geminiApiKey",Q),ee&&localStorage.setItem("openaiApiKey",ee),ne&&localStorage.setItem("claudeApiKey",ne),(Q||ee||ne)&&(Y(!0),ie(!1),z("API keys saved"))},className:"btn-primary text-sm w-full mt-2",children:"Save API Keys"})]}),$.jsxs("div",{children:[$.jsx("label",{htmlFor:"template-select",className:"block text-sm font-medium mb-1",children:"Template"}),$.jsxs("select",{id:"template-select",value:ce,onChange:e=>le(e.target.value),className:"input-field text-sm",children:[$.jsx("option",{value:"standard",children:"Standard"}),$.jsx("option",{value:"detailed",children:"Detailed"}),$.jsx("option",{value:"brief",children:"Brief"})]})]})]})]}),$.jsxs("div",{className:"card",children:[$.jsxs("div",{className:"mb-4",children:[$.jsxs("div",{className:"flex items-center justify-between",children:[$.jsx("h2",{className:"text-lg font-semibold text-gray-900",children:"Clinical Notes"}),$.jsxs("div",{className:"flex items-center gap-2 text-xs text-gray-500",children:[$.jsx(x,{className:"h-4 w-4"}),$.jsx("span",{children:"Paste all notes - system will auto-detect types"})]})]}),$.jsx("p",{className:"text-xs text-gray-600 mt-1",children:"Paste admission notes, progress notes, consultant notes, procedure notes, and discharge notes. The system will automatically detect and separate different note types."})]}),Object.entries(i).some(([e,t])=>t.trim())&&$.jsxs("div",{className:"mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg",children:[$.jsx("p",{className:"text-xs font-medium text-blue-900 mb-2",children:"Detected Note Types:"}),$.jsx("div",{className:"flex flex-wrap gap-2",children:Object.entries(i).filter(([e,t])=>t.trim()).map(([e,t])=>$.jsx("span",{className:"px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs font-medium capitalize",children:e},e))})]}),$.jsxs("div",{className:"relative",children:[$.jsx("textarea",{value:n,onChange:e=>a(e.target.value),placeholder:"Paste all clinical notes here (admission, progress, consultations, procedures, discharge notes)...\n\nExample format (optional delimiters):\n===================================\nADMISSION NOTE / H&P\nPatient: John Doe...\n===================================\nPROGRESS NOTE - POD 1\nPatient doing well...\n===================================\nDISCHARGE NOTE\nPatient ready for discharge...",className:"input-field h-80 font-mono text-sm resize-y"}),$.jsxs("label",{className:"absolute top-3 right-3 cursor-pointer",children:[$.jsx("div",{className:"p-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors",children:$.jsx(r,{className:"h-4 w-4 text-gray-600"})}),$.jsx("input",{ref:ge,type:"file",className:"hidden",accept:".txt,.md",onChange:e=>((e,t)=>{const n=e.target.files[0];if(!n)return;const s=new FileReader;s.onload=e=>{t(e.target.result),z(`File uploaded: ${n.name}`)},s.onerror=()=>{_("Failed to read file")},s.readAsText(n)})(e,a)})]})]}),$.jsxs("div",{className:"mt-4 flex items-center gap-2 text-xs text-gray-600",children:[$.jsx(b,{className:"h-4 w-4"}),$.jsxs("span",{children:["Character count: ",n.length]})]}),$.jsx("div",{className:"mt-4",children:$.jsx("button",{onClick:async()=>{if(n.trim()){L(!0),_(""),U([]),z("");try{const i=ye(n);m(i);const o=Object.entries(i).filter(([e,t])=>t.trim()).map(([e,t])=>e);let r;o.length>0&&z(`Detected notes: ${o.join(", ")}`);try{const n={claude:ne,openai:ee,gemini:Q};if(await t(i,n,W),e){r=(e=>{if(!e||!e.summary)return null;const t=e.summary;return{patientName:t.patientName||"",age:t.age||"",sex:t.sex||"",mrn:t.mrn||"",admitDate:t.admitDate||"",dischargeDate:t.dischargeDate||"",procedureDate:t.procedureDate||"",admittingDiagnosis:t.admittingDiagnosis||"",dischargeDiagnosis:t.dischargeDiagnosis||"",procedures:t.procedures||"",complications:t.complications||"",consultants:t.consultants||"",medications:t.medications||"",hospitalCourse:t.hospitalCourse||"",dischargeInstructions:t.dischargeInstructions||"",followUp:t.followUp||"",confidence:e.completeness||0,extractionMethod:e.metadata?.approach||"hybrid",pipeline:e.pipeline||[],validation:e.validation||{}}})(e);const t=r.extractionMethod;z(`âœ“ Hybrid extraction completed (${t})`),e.validation?.warnings?.length>0&&U(e.validation.warnings)}else r=xe(i),z("Pattern extraction completed")}catch(s){if(console.warn("Hybrid backend failed, using legacy extraction:",s),W&&(Q||ee||ne))try{r=await ve(),z("Multi-AI extraction completed (legacy)")}catch(a){console.warn("AI extraction failed, falling back to patterns:",a),r=xe(i),U(["AI extraction failed, used pattern matching instead"])}else r=xe(i),z("Pattern extraction completed")}const c=[];r.patientName||c.push("Patient name not found"),r.dischargeDiagnosis||c.push("Discharge diagnosis not found"),r.dischargeMedications?.length||c.push("No discharge medications found"),c.length>0&&U(e=>[...e,...c]),E(r),T("review")}catch(i){_(`Extraction failed: ${i.message}`)}finally{L(!1)}}else _("Please enter clinical notes")},disabled:R||!n.trim(),className:"w-full btn-primary",children:R?$.jsxs($.Fragment,{children:[$.jsx(S,{className:"h-5 w-5 animate-spin"}),$.jsx("span",{children:"Detecting notes and extracting..."})]}):$.jsxs($.Fragment,{children:[W?$.jsx(c,{className:"h-5 w-5"}):$.jsx(N,{className:"h-5 w-5"}),$.jsx("span",{children:"Auto-Detect & Extract Information"})]})})})]}),w&&$.jsxs("div",{className:"card",children:[$.jsxs("div",{className:"flex items-center justify-between mb-4",children:[$.jsx("h3",{className:"text-lg font-semibold text-gray-900",children:"Extracted Data"}),$.jsx(v,{className:"h-5 w-5 text-gray-400"})]}),$.jsx("div",{className:"space-y-3 max-h-96 overflow-y-auto",children:Object.entries(w).map(([e,t])=>{const n=Array.isArray(t),s=n?t.join("\n"):t||"";return $.jsxs("div",{children:[$.jsx("label",{className:"block text-sm font-medium text-gray-700 mb-1",children:e.replace(/([A-Z])/g," $1").replace(/^./,e=>e.toUpperCase())}),n?$.jsx("textarea",{value:s,onChange:t=>Ee(e,t.target.value.split("\n").filter(Boolean)),rows:Math.min(3,t.length||1),className:"input-field text-sm font-mono"}):$.jsx("input",{type:"text",value:s,onChange:t=>Ee(e,t.target.value),className:"input-field text-sm"})]},e)})}),$.jsxs("button",{onClick:()=>{if(!w)return void _("Please extract data first");const e=(e,t=!1)=>e&&0!==e.length?e.map((e,n)=>`${t?`${n+1}.`:"â€¢"} ${e}`).join("\n"):"None",t={standard:()=>`DISCHARGE SUMMARY\n================================================================================\nDate: ${(new Date).toLocaleDateString()}\n\nPATIENT INFORMATION\nName: ${w.patientName||"[Name]"}\nAge/Sex: ${w.age||"[Age]"} / ${w.sex||"[Sex]"}\nMRN: ${w.mrn||"[MRN]"}\nAdmission Date: ${w.admitDate||"[Admit Date]"}\nDischarge Date: ${w.dischargeDate||"[Discharge Date]"}\n\nDIAGNOSES\nAdmitting Diagnosis: ${w.admittingDiagnosis||"[Admitting Dx]"}\nDischarge Diagnosis: ${w.dischargeDiagnosis||"[Discharge Dx]"}\n\nINITIAL PRESENTATION\nSigns and Symptoms:\n${w.historyPresenting||"[Initial presenting signs and symptoms on admission]"}\n\nInitial Imaging Studies:\n${w.imaging&&w.imaging.length>0?w.imaging.slice(0,2).map((e,t)=>`${t+1}. ${e}`).join("\n"):"[Initial CT/MRI/X-ray findings on presentation]"}\n\nPre-Operative Clinical Examination:\n${w.currentExam||w.neurologicalExam||"[Pre-operative neurological and physical examination findings]"}\n\nTREATMENT AND INTERVENTIONS\nSurgery/Procedure Performed:\n${w.procedures&&w.procedures.length>0?w.procedures.map((e,t)=>`${t+1}. ${e}${w.admitDate?` (Date: ${w.admitDate})`:""}`).join("\n"):"[Surgery type, approach, and date]"}\n\nComplications:\n${w.complications&&w.complications.length>0?e(w.complications,!1):"None noted"}\n\nOther Treatments:\n${w.dischargeMedications&&w.dischargeMedications.length>0?`Medical management included: ${w.dischargeMedications.slice(0,3).join(", ")}`:"[Other medical treatments, interventions]"}\n\nEVOLUTION OF CLINICAL COURSE\nSigns and Symptoms Evolution:\n${w.postOpProgress||w.hospitalCourse||"[Description of how symptoms evolved throughout hospitalization]"}\n\nImaging Evolution:\n${w.imaging&&w.imaging.length>2?"Follow-up imaging:\n"+w.imaging.slice(2).map((e,t)=>`${t+1}. ${e}`).join("\n"):"[Follow-up imaging studies and changes from initial studies]"}\n\nMajor Events During Hospitalization:\n${w.majorEvents&&w.majorEvents.length>0?e(w.majorEvents,!1):"None"}\n\nPOST-OPERATIVE STATUS\nClinical Examination at Discharge:\nVital Signs: ${w.vitalSigns||"Stable"}\n\nNeurological Examination:\n${w.neurologicalExam||w.dischargeExam||"[Mental status, cranial nerves, motor, sensory, reflexes, coordination, gait]"}\n\nGeneral Physical Examination:\n${w.dischargeExam||w.currentExam||"[Cardiovascular, respiratory, abdominal, wound assessment]"}\n\nFUNCTIONAL STATUS AT DISCHARGE\n${w.kps?`Karnofsky Performance Status (KPS): ${w.kps}`:"[KPS score to be assessed]"}\n${w.dischargeConditionScore?`Discharge Condition Score: ${w.dischargeConditionScore}`:""}\n${w.functionalStatus?`Functional Assessment: ${w.functionalStatus}`:"[Functional capabilities and independence level]"}\n\nREHABILITATION SERVICES\nPhysical Therapy:\n${w.consultantRecommendations&&w.consultantRecommendations.some(e=>e.toLowerCase().includes("pt")||e.toLowerCase().includes("physical therapy"))?w.consultantRecommendations.filter(e=>e.toLowerCase().includes("pt")||e.toLowerCase().includes("physical therapy")).join("\n"):"[Physical therapy evaluation and recommendations if consulted]"}\n\nOccupational Therapy:\n${w.consultantRecommendations&&w.consultantRecommendations.some(e=>e.toLowerCase().includes("ot")||e.toLowerCase().includes("occupational therapy"))?w.consultantRecommendations.filter(e=>e.toLowerCase().includes("ot")||e.toLowerCase().includes("occupational therapy")).join("\n"):"[Occupational therapy evaluation and recommendations if consulted]"}\n\nCONSULTANT EVALUATIONS\n${w.consultantRecommendations&&w.consultantRecommendations.length>0?w.consultantRecommendations.filter(e=>!(e.toLowerCase().includes("pt")||e.toLowerCase().includes("ot")||e.toLowerCase().includes("physical therapy")||e.toLowerCase().includes("occupational therapy"))).map((e,t)=>`${t+1}. ${e}`).join("\n")||"None documented (besides PT/OT above)":"None documented"}\n\nPAST MEDICAL HISTORY\n${e(w.pmh)}\n\nPAST SURGICAL HISTORY\n${e(w.psh)}\n\nALLERGIES: ${w.allergies||"NKDA"}\n\nFINAL DISCHARGE STATUS\nClinical Status: ${w.disposition||"Improved and stable for discharge"}\nDiet: ${w.diet}\nActivity: ${w.activity}\n\nFOLLOW-UP APPOINTMENTS\n${e(w.followUp)}\n\nDISCHARGE MEDICATIONS\n${e(w.dischargeMedications,!0)}\n\nIf you have any questions or concerns, please contact your physician.\n\n_______________________________\nPhysician Signature`,detailed:()=>`COMPREHENSIVE DISCHARGE SUMMARY - NEUROSURGERY/SPINE\n================================================================================\nDate: ${(new Date).toLocaleDateString()}\n\nPATIENT INFORMATION\nName: ${w.patientName||"[Name]"}\nAge/Sex: ${w.age||"[Age]"} / ${w.sex||"[Sex]"}\nMRN: ${w.mrn||"[MRN]"}\nAdmission Date: ${w.admitDate||"[Admit Date]"}\nDischarge Date: ${w.dischargeDate||"[Discharge Date]"}\nLength of Stay: ${w.los||"[Calculate from dates]"}\n\nDIAGNOSES\nPrimary/Admitting Diagnosis: ${w.admittingDiagnosis||"[Primary diagnosis]"}\nDischarge/Final Diagnosis: ${w.dischargeDiagnosis||"[Final diagnosis with post-operative status]"}\n\nPAST MEDICAL HISTORY\n${e(w.pmh)}\n\nPAST SURGICAL HISTORY\n${e(w.psh)}\n\nALLERGIES: ${w.allergies||"NKDA"}\n\nINITIAL PRESENTATION\nChief Complaint & Presenting Signs/Symptoms:\n${w.historyPresenting||"[Detailed presenting symptoms, onset, progression, initial signs and symptoms leading to admission]"}\n\nPre-Operative Clinical Examination:\nVital Signs: ${w.vitalSigns||"[Admission vital signs]"}\n${w.neurologicalExam?`\nNeurological Examination: ${w.neurologicalExam}`:""}\n${w.currentExam?`\nGeneral Examination: ${w.currentExam}`:""}\n${w.neurologicalExam||w.currentExam?"":"[Complete pre-operative examination findings]"}\n\nInitial Imaging Studies:\n${w.imaging&&w.imaging.length>0?w.imaging.slice(0,2).map((e,t)=>`${t+1}. ${e}`).join("\n"):"[Detailed CT/MRI/X-ray findings on presentation including dates and key findings]"}\n\nTREATMENT AND INTERVENTIONS\nProcedures/Operations Performed:\n${w.procedures&&w.procedures.length>0?w.procedures.map((e,t)=>`${t+1}. ${e}${w.admitDate?` (Date: ${w.admitDate})`:""}`).join("\n"):"[Date, procedure name, surgeon, approach, operative findings, estimated blood loss, complications]"}\n\nComplications:\n${w.complications&&w.complications.length>0?w.complications.map((e,t)=>`${t+1}. ${e}`).join("\n"):"No intraoperative or postoperative complications noted."}\n\nOther Medical Treatments:\nâ€¢ Medical Management: ${w.dischargeMedications&&w.dischargeMedications.length>0?w.dischargeMedications.slice(0,3).join(", ")+(w.dischargeMedications.length>3?", and others":""):"[Medications, pain control, DVT prophylaxis]"}\nâ€¢ Symptom Management: [Pain management, nausea control, other supportive care]\n\nEVOLUTION OF CLINICAL COURSE\nHospital Course Summary:\n${w.hospitalCourse||"[Overview of hospital course from admission through discharge]"}\n\nPost-Operative Progress (Day-by-Day):\n${w.postOpProgress||"[POD #1, POD #2, etc. with daily progress notes]"}\n\nSigns and Symptoms Evolution:\n[Description of how presenting symptoms evolved - improved, resolved, or persisted]\n\nImaging Evolution:\n${w.imaging&&w.imaging.length>2?"Follow-up imaging studies:\n"+w.imaging.slice(2).map((e,t)=>`${t+1}. ${e}`).join("\n"):"[Post-operative imaging studies and comparison to pre-operative findings]"}\n\nMajor Events During Hospitalization:\n${w.majorEvents&&w.majorEvents.length>0?w.majorEvents.map((e,t)=>`${t+1}. ${e}`).join("\n"):"No major events during hospitalization."}\n\nPOST-OPERATIVE STATUS AT DISCHARGE\nClinical Examination:\nDate of Examination: ${w.dischargeDate||(new Date).toLocaleDateString()}\n\nVital Signs: ${w.vitalSigns||"T: [temp] BP: [bp] HR: [hr] RR: [rr] O2 Sat: [sat]%"}\n\nNeurological Examination:\n${w.neurologicalExam||w.dischargeExam||"â€¢ Mental Status: [Alert, oriented x3, appropriate]\nâ€¢ Cranial Nerves: [II-XII intact]\nâ€¢ Motor: [Strength 5/5 bilateral upper/lower extremities]\nâ€¢ Sensory: [Intact to light touch and pinprick]\nâ€¢ Reflexes: [DTRs 2+ and symmetric]\nâ€¢ Coordination: [Normal finger-to-nose, heel-to-shin]\nâ€¢ Gait: [Steady, independent/assisted]"}\n\n${w.dischargeExam||w.currentExam?`\nGeneral Physical Examination:\n${w.dischargeExam||w.currentExam}`:"\nGeneral Physical Examination:\nâ€¢ General: Well-appearing, no acute distress\nâ€¢ HEENT: Normocephalic, atraumatic\nâ€¢ Cardiovascular: Regular rate and rhythm\nâ€¢ Respiratory: Clear to auscultation bilaterally\nâ€¢ Abdomen: Soft, non-tender, non-distended\nâ€¢ Extremities: No edema\nâ€¢ Skin/Wound: [Surgical incision clean, dry, intact]"}\n\nFUNCTIONAL STATUS AT DISCHARGE\n${w.kps?`Karnofsky Performance Status (KPS): ${w.kps}`:"[KPS Score: To be assessed based on functional capabilities]"}\n${w.dischargeConditionScore?`\nDischarge Condition Score: ${w.dischargeConditionScore}`:"\nDischarge Condition Score: [1-Critical, 2-Poor, 3-Fair, 4-Good, 5-Excellent]"}\n${w.functionalStatus?`\nFunctional Assessment: ${w.functionalStatus}`:"\nFunctional Assessment: [Independence level, mobility, self-care abilities]"}\n\nREHABILITATION SERVICES\nPhysical Therapy Evaluation and Recommendations:\n${w.consultantRecommendations&&w.consultantRecommendations.some(e=>e.toLowerCase().includes("pt")||e.toLowerCase().includes("physical therapy"))?w.consultantRecommendations.filter(e=>e.toLowerCase().includes("pt")||e.toLowerCase().includes("physical therapy")).join("\n"):"[PT assessment of strength, mobility, transfers, gait; recommendations for ongoing therapy]"}\n\nOccupational Therapy Evaluation and Recommendations:\n${w.consultantRecommendations&&w.consultantRecommendations.some(e=>e.toLowerCase().includes("ot")||e.toLowerCase().includes("occupational therapy"))?w.consultantRecommendations.filter(e=>e.toLowerCase().includes("ot")||e.toLowerCase().includes("occupational therapy")).join("\n"):"[OT assessment of ADLs, functional cognition; recommendations for adaptive equipment/strategies]"}\n\nCONSULTANT EVALUATIONS & RECOMMENDATIONS\n${w.consultantRecommendations&&w.consultantRecommendations.length>0?w.consultantRecommendations.filter(e=>!(e.toLowerCase().includes("pt")||e.toLowerCase().includes("ot")||e.toLowerCase().includes("physical therapy")||e.toLowerCase().includes("occupational therapy"))).map((e,t)=>`${t+1}. ${e}`).join("\n")||"None documented (besides PT/OT listed above)":"No additional consultant evaluations documented or none required."}\n\nFINAL DISCHARGE STATUS\nClinical Status: ${w.disposition||"Patient improved and stable for discharge"}\nOverall Condition: [Summary of patient's status at time of discharge]\n\nDISCHARGE PLAN\n\nDisposition: ${w.disposition}\n\nActivity: ${w.activity}\n\nDiet: ${w.diet}\n\nWound Care: [Specific instructions for surgical site care]\n\nWarning Signs - Call physician or go to ER if:\nâ€¢ Severe headache or neck pain\nâ€¢ New or worsening weakness or numbness\nâ€¢ Fever > 101.5Â°F\nâ€¢ Wound drainage, redness, or swelling\nâ€¢ Loss of bowel/bladder control\nâ€¢ Severe pain not controlled by medications\nâ€¢ Any other concerning symptoms\n\nFOLLOW-UP CARE\n${e(w.followUp)}\n${w.followUp&&0!==w.followUp.length?"":"â€¢ Follow up with surgeon in 2 weeks\nâ€¢ Follow up with primary care physician in 1-2 weeks\nâ€¢ Physical therapy as arranged"}\n\nDISCHARGE MEDICATIONS\n${e(w.dischargeMedications,!0)}\n${w.dischargeMedications&&0!==w.dischargeMedications.length?"":"[Medication list with name, dose, frequency, duration, and indication]"}\n\nADDITIONAL INSTRUCTIONS\nâ€¢ Continue all medications as prescribed\nâ€¢ Attend all follow-up appointments\nâ€¢ Comply with activity restrictions\nâ€¢ Practice proper wound care\nâ€¢ Contact physician with any concerns\n\n_______________________________\nAttending Physician Signature\n\n_______________________________\nDate`,brief:()=>`DISCHARGE SUMMARY - BRIEF\n================================================================================\nPatient: ${w.patientName||"[Name]"} (${w.age||"[Age]"}/${w.sex||"[Sex]"})\nDates: ${w.admitDate||"[Admit]"} to ${w.dischargeDate||"[Discharge]"}\n\nDiagnosis: ${w.dischargeDiagnosis||"[Diagnosis]"}\nProcedures: ${w.procedures?.join(", ")||"None"}\n\nCourse: ${w.hospitalCourse||"[Brief hospital course]"}\n\nDischarge Exam: ${w.dischargeExam||w.currentExam||"Stable"}\n\nMedications:\n${e(w.dischargeMedications,!0)}\n\nFollow-up:\n${e(w.followUp)}\n\nDisposition: ${w.disposition}`};let n=(t[ce]||t.standard)();n=we(n),A(n),I(n),z("Summary generated successfully"),T("output")},className:"w-full btn-primary mt-4",children:[$.jsx(h,{className:"h-5 w-5"}),$.jsx("span",{children:"Generate Summary"})]})]})]}),$.jsxs("div",{className:"space-y-6",children:[$.jsxs("div",{className:"card",children:[$.jsxs("div",{className:"flex items-center justify-between mb-4 no-print",children:[$.jsx("h2",{className:"text-lg font-semibold text-gray-900",children:"Generated Summary"}),j&&$.jsxs("div",{className:"flex items-center gap-2",children:[$.jsx("button",{onClick:()=>V(!J),className:"p-2 rounded-lg transition-colors "+(J?"bg-blue-100 text-blue-600":"text-gray-600 hover:bg-gray-100"),title:J?"View Mode":"Edit Mode",children:J?$.jsx(p,{className:"h-5 w-5"}):$.jsx(v,{className:"h-5 w-5"})}),$.jsx("button",{onClick:async()=>{try{await navigator.clipboard.writeText(j),K(!0),z("Copied to clipboard"),setTimeout(()=>K(!1),2e3)}catch(e){_("Failed to copy to clipboard")}},className:"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors",title:"Copy",children:G?$.jsx(l,{className:"h-5 w-5 text-green-600"}):$.jsx(C,{className:"h-5 w-5"})}),$.jsx("button",{onClick:()=>{const e=new Blob([j],{type:"text/plain"}),t=URL.createObjectURL(e),n=document.createElement("a");n.href=t,n.download=`discharge_summary_${(new Date).toISOString().split("T")[0]}.txt`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(t),z("Summary downloaded")},className:"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors",title:"Download",children:$.jsx(o,{className:"h-5 w-5"})}),$.jsx("button",{onClick:()=>{window.print()},className:"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors",title:"Print",children:$.jsx(D,{className:"h-5 w-5"})})]})]}),J&&j&&$.jsx("div",{className:"mb-3 p-3 bg-blue-50 border border-blue-200 rounded-lg no-print",children:$.jsxs("div",{className:"flex items-start gap-2",children:[$.jsx(c,{className:"h-5 w-5 text-blue-600 flex-shrink-0 mt-0.5"}),$.jsxs("div",{className:"text-sm text-blue-800",children:[$.jsx("p",{className:"font-medium",children:"ML Learning Mode Active"}),$.jsxs("p",{className:"text-xs mt-1",children:["Your edits will be analyzed (without storing patient data) to improve future summaries. Total edits learned: ",de.totalEdits]})]})]})}),j?$.jsx("div",{children:J?$.jsxs("div",{className:"space-y-3",children:[$.jsx("textarea",{value:P,onChange:e=>I(e.target.value),className:"w-full h-[600px] p-4 border border-gray-300 rounded-lg font-mono text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"}),$.jsxs("div",{className:"flex gap-2 no-print",children:[$.jsxs("button",{onClick:()=>De(P),className:"btn-primary flex-1",children:[$.jsx(y,{className:"h-4 w-4"}),$.jsx("span",{children:"Save & Learn from Edits"})]}),$.jsx("button",{onClick:()=>{I(j),V(!1)},className:"btn-secondary",children:"Cancel"})]})]}):$.jsx("div",{ref:he,className:"bg-gray-50 rounded-lg p-4 max-h-[600px] overflow-auto",children:$.jsx("pre",{className:"whitespace-pre-wrap font-mono text-sm text-gray-800",children:j})})}):$.jsx("div",{className:"flex items-center justify-center h-96 border-2 border-dashed border-gray-300 rounded-lg",children:$.jsxs("div",{className:"text-center text-gray-400",children:[$.jsx(h,{className:"h-12 w-12 mx-auto mb-3"}),$.jsx("p",{children:"Generated summary will appear here"}),$.jsx("p",{className:"text-xs mt-2",children:"Extract data and generate summary to begin"})]})})]}),de.totalEdits>0&&$.jsxs("div",{className:"card bg-gradient-to-br from-purple-50 to-blue-50 no-print",children:[$.jsxs("div",{className:"flex items-center gap-2 mb-3",children:[$.jsx(c,{className:"h-5 w-5 text-purple-600"}),$.jsx("h3",{className:"text-sm font-semibold text-gray-900",children:"ML Learning Statistics"})]}),$.jsxs("div",{className:"grid grid-cols-2 gap-3 text-sm",children:[$.jsxs("div",{className:"p-2 bg-white rounded",children:[$.jsx("p",{className:"text-gray-600 text-xs",children:"Total Edits"}),$.jsx("p",{className:"font-semibold text-lg",children:de.totalEdits})]}),$.jsxs("div",{className:"p-2 bg-white rounded",children:[$.jsx("p",{className:"text-gray-600 text-xs",children:"Patterns Learned"}),$.jsx("p",{className:"font-semibold text-lg",children:Object.keys(de.patterns).length})]})]}),de.lastUpdated&&$.jsxs("p",{className:"text-xs text-gray-600 mt-2",children:["Last updated: ",new Date(de.lastUpdated).toLocaleString()]})]})]})]}),$.jsx("div",{className:"mt-8 no-print",children:$.jsx(M,{onPatternsUpdated:e=>{pe(e),z("Training patterns updated from examples"),setTimeout(()=>z(""),3e3)}})})]})};function Y(){const[e,t]=s.useState(!1);return s.useEffect(()=>{e?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")},[e]),$.jsxs("div",{className:"min-h-screen "+(e?"dark bg-gray-900":"bg-gray-50"),children:[$.jsx("div",{className:"fixed top-4 right-4 z-50 no-print",children:$.jsx("button",{onClick:()=>t(!e),className:"p-2 bg-white dark:bg-gray-800 rounded-lg shadow-lg hover:shadow-xl transition-all","aria-label":"Toggle dark mode",children:e?$.jsx(w,{className:"h-5 w-5 text-yellow-500"}):$.jsx(E,{className:"h-5 w-5 text-gray-700"})})}),$.jsx(W,{})]})}L.createRoot(document.getElementById("root")).render($.jsx(j.StrictMode,{children:$.jsx(Y,{})}));
